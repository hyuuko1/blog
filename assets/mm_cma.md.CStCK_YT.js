import{_ as i,c as a,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const g=JSON.parse('{"title":"CMA (Contiguous Memory Allocator) 连续内存分配器","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"CMA (Contiguous Memory Allocator) 连续内存分配器 | Blog"}]]},"headers":[],"relativePath":"mm/cma.md","filePath":"mm/cma.md","lastUpdated":1761828946000}'),p={name:"mm/cma.md"};function e(h,s,k,t,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="cma-contiguous-memory-allocator-连续内存分配器" tabindex="-1">CMA (Contiguous Memory Allocator) 连续内存分配器 <a class="header-anchor" href="#cma-contiguous-memory-allocator-连续内存分配器" aria-label="Permalink to “CMA (Contiguous Memory Allocator) 连续内存分配器”">​</a></h1><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><ul><li>《Linux 内核深度解析》3.20 连续内存分配器</li><li><a href="https://www.wowotech.net/memory_management/cma.html" target="_blank" rel="noreferrer">CMA 模块学习笔记 - 蜗窝科技</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12182594.html" target="_blank" rel="noreferrer">【原创】（十六）Linux 内存管理之 CMA - LoyenWang - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/105745299" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [二] - CMA - 知乎</a></li><li><a href="https://blog.csdn.net/willhq/article/details/124602370" target="_blank" rel="noreferrer">在 Linux 内核模块中使用 CMA 内存分配_linux cma-CSDN 博客</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/129457653" target="_blank" rel="noreferrer">CMA技术原理分析-CSDN博客</a></li></ul><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to “简介”">​</a></h2><p>在系统长时间运行后，内存可能碎片化，很难找到连续的物理页，连续内存分配器（Contiguous Memory Allocator，CMA）使得这种情况下分配大的连续内存块成为可能。</p><p>嵌入式系统中的许多设备不支持分散聚集和 I/O 映射（是指 IOMMU？），需要连续的大内存块。例如手机上 1300 万像素的摄像头，一个像素占用 3 字节，拍摄一张照片需要大约 37MB 内存。在系统长时间运行后，内存可能碎片化，很难找到连续的物理页，页分配器和块分配器很可能无法分配这么大的连续内存块。</p><p>一种解决方案是为设备保留一块大的内存区域，缺点是：当设备驱动不使用的时候（大多数时间手机摄像头是空闲的），内核的其他模块不能使用这块内存。连续内存分配器试图解决这个问题，保留一块大的内存区域，当设备驱动不使用的时候，内核的其他模块可以使用，当然有要求：只有申请可移动类型的页时可以借用；当设备驱动需要使用的时候，把已经分配的页迁移到其他地方，形成物理地址连续的大内存块。</p><h2 id="软件层次" tabindex="-1">软件层次 <a class="header-anchor" href="#软件层次" aria-label="Permalink to “软件层次”">​</a></h2><ol><li>连续内存分配器是在页分配器的基础上实现的，提供的接口 cma_alloc 用来从 CMA 区域分配页，接口 cma_release 用来释放从 CMA 区域分配的页。</li><li>在连续内存分配器的基础上实现了 DMA 映射框架专用的连续内存分配器，简称 DMA 专用连续内存分配器，提供的接口 <code>dma_alloc_from_contiguous</code> 用来从 CMA 区域分配页，接口 dma_release_from_contiguous 用来释放从 CMA 区域分配的页。</li><li>DMA 映射框架从 DMA 专用连续内存分配器分配或释放页，为设备驱动程序提供的接口 <code>dma_alloc_coherent</code> 和 <code>dma_alloc_noncoherent</code> 用来分配内存，接口 dma_free_coherent 和 dma_free_noncoherent 用来释放内存。</li><li>设备驱动程序调用 DMA 映射框架提供的函数来分配或释放内存。</li></ol><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 自顶向下将整个流程串一遍？从 <code>vring_alloc_queue-&gt;dma_alloc_coherent</code> 开始，这部分内容放到将来讲 dma-mapping 的地方吧。kernel/dma/ 全弄明白 <ul><li>dma-pool ？</li></ul></li></ul><h3 id="代码结构" tabindex="-1">代码结构 <a class="header-anchor" href="#代码结构" aria-label="Permalink to “代码结构”">​</a></h3><ul><li>kernel/dma/contiguous.c</li><li>mm/cma.c</li><li>mm/cma.h</li></ul><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to “数据结构”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   base_pfn;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* CMA 区域的起始页帧号 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   count;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 页数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bitmap;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 每个位描述页的分配状态，1 表示已分配 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order_per_bit;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 位图中每隔 bit 描述的物理页面阶数，目前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					   取值为0，表示每个 bit 描述一页 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	spinlock_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	lock;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name[CMA_MAX_NAME];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserve_pages_on_error;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 一个 struct cma 数组，记录了所有的 cma 区域。开启 CONFIG_NUMA 时，默认最多 20 个 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cma_areas[MAX_CMA_AREAS];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cma_area_count;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 迁移类型 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migratetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_UNMOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_MOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_RECLAIMABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_PCPTYPES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* the number of types on the pcp lists */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_HIGHATOMIC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MIGRATE_PCPTYPES,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_CMA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* MIGRATE_CMA 被设计成模拟 ZONE_MOVABLE 工作的方式， */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * MIGRATE_CMA migration type is designed to mimic the way</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * ZONE_MOVABLE works.  Only movable pages can be allocated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * from MIGRATE_CMA pageblocks and page allocator never</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * implicitly change migration type of MIGRATE_CMA pageblock.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * The way to use it is to change migratetype of a range of</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * pageblocks to MIGRATE_CMA which can be done by</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * __free_pageblock_cma() function.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_CMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_MEMORY_ISOLATION</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_ISOLATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* can&#39;t allocate from here */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_TYPES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>关于 <code>migratetype</code>，详见<a href="./migration">页面迁移</a>。</p><h2 id="初始化-cma-区域" tabindex="-1">初始化 CMA 区域 <a class="header-anchor" href="#初始化-cma-区域" aria-label="Permalink to “初始化 CMA 区域”">​</a></h2><ul class="contains-task-list"><li><code>CONFIG_CMA</code>，启用连续内存分配器。</li><li><code>CONFIG_CMA_AREAS</code>，指定 CMA 区域的最大数量，默认值是 7。</li><li><code>CONFIG_DMA_CMA</code>，启用允许设备驱动分配内存的连续内存分配器。</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> <code>CONFIG_DMA_NUMA_CMA</code> 干啥用的？</li></ul><p>CMA 区域分为全局 CMA 区域和设备私有 CMA 区域。全局 CMA 区域是由所有设备驱动共享的，设备私有 CMA 区域由指定的一个或多个设备驱动使用。</p><p>配置 CMA 区域有 3 种方法。</p><ol><li>内核参数 <code>cma=nn[MG]@[start[MG][-end[MG]]]</code></li><li>编译时通过 <code>CONFIG_CMA_SIZE_SEL_MBYTES</code> 和 <code>CONFIG_CMA_SIZE_SEL_PERCENTAGE</code> 配置全局 CMA 区域的大小</li><li>通过设备树源文件的节点 <code>/reserved-memory</code> 配置 CMA 区域，如果子节点的属性 <code>compatible</code> 的值是 <code>shared-dma-pool</code>，表示全局 CMA 区域，否则表示设备私有 CMA 区域。</li></ol><p>CMA 相关内核参数：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>	cma=nn[MG]@[start[MG][-end[MG]]]</span></span>
<span class="line"><span>			[KNL,CMA,EARLY]</span></span>
<span class="line"><span>			Sets the size of kernel global memory area for</span></span>
<span class="line"><span>			contiguous memory allocations and optionally the</span></span>
<span class="line"><span>			placement constraint by the physical address range of</span></span>
<span class="line"><span>			memory allocations. A value of 0 disables CMA</span></span>
<span class="line"><span>			altogether. For more information, see</span></span>
<span class="line"><span>			kernel/dma/contiguous.c</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	cma_pernuma=nn[MG]</span></span>
<span class="line"><span>			[KNL,CMA,EARLY]</span></span>
<span class="line"><span>			Sets the size of kernel per-numa memory area for</span></span>
<span class="line"><span>			contiguous memory allocations. A value of 0 disables</span></span>
<span class="line"><span>			per-numa CMA altogether. And If this option is not</span></span>
<span class="line"><span>			specified, the default value is 0.</span></span>
<span class="line"><span>			With per-numa CMA enabled, DMA users on node nid will</span></span>
<span class="line"><span>			first try to allocate buffer from the pernuma area</span></span>
<span class="line"><span>			which is located in node nid, if the allocation fails,</span></span>
<span class="line"><span>			they will fallback to the global default memory area.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	numa_cma=&lt;node&gt;:nn[MG][,&lt;node&gt;:nn[MG]]</span></span>
<span class="line"><span>			[KNL,CMA,EARLY]</span></span>
<span class="line"><span>			Sets the size of kernel numa memory area for</span></span>
<span class="line"><span>			contiguous memory allocations. It will reserve CMA</span></span>
<span class="line"><span>			area for the specified node.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>			With numa CMA enabled, DMA users on node nid will</span></span>
<span class="line"><span>			first try to allocate buffer from the numa area</span></span>
<span class="line"><span>			which is located in node nid, if the allocation fails,</span></span>
<span class="line"><span>			they will fallback to the global default memory area.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>初始化分为以下 3 步</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1. 内核参数解析：CMA 区域的大小等等 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __init </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">early_cma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		pr_err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Config string not provided</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EINVAL;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	size_cmdline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memparse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	base_cmdline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memparse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		limit_cmdline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base_cmdline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size_cmdline;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	limit_cmdline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memparse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">early_param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cma&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, early_cma);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 2. 使用 memblock 内存分配器为 CMA 分配内存，即，为 CMA 预留内存。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   注意，如果用某个指定的范围的内存创建 CMA，但这个范围中的一部分内存已经被</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   memblock 分配出去了，那么就会创建失败 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">start_kernel-&gt;setup_arch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  dma_contiguous_reserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max_pfn_mapped </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PAGE_SHIFT);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dma_contiguous_reserve_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      cma_declare_contiguous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_declare_contiguous_nid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 进行 reserve，本质上就相当于是 memblock 将这段物理内存分配出去 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        memblock_reserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base, size)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 记录在 struct cma cma_areas[MAX_CMA_AREAS]; 数组中 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cma_init_reserved_mem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cma_areas[cma_area_count];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cma-&gt;base_pfn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PFN_DOWN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cma-&gt;count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PAGE_SHIFT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cma-&gt;order_per_bit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order_per_bit;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          cma_area_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 3. 在 1 号进程执行 initcall，将 CMA 区域的物理页释放给 buddy system */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">core_initcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cma_init_reserved_areas);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cma_area_count; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cma_activate_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cma_areas[i]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 每次初始化 pageblock_nr_pages 个页面 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      init_cma_reserved_pageblock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 标记 pageblock 的迁移类型为 MIGRATE_CMA */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        set_pageblock_migratetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page, MIGRATE_CMA);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 将 pageblock 释放给 buddy system，会被放到 MIGRATE_CMA 链表里 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        __free_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page, pageblock_order);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p>初始化过程总结：</p><ol><li>解析内核参数，确定好 CMA 区域的大小和范围</li><li>通过 memblock 为 CMA 区域分配物理内存</li><li>将 pageblock 标记为 MIGRATE_CMA 迁移类型，再释放给 buddy system</li></ol><h2 id="内核的其他模块从-cma-区域借用页" tabindex="-1">内核的其他模块从 CMA 区域借用页 <a class="header-anchor" href="#内核的其他模块从-cma-区域借用页" aria-label="Permalink to “内核的其他模块从 CMA 区域借用页”">​</a></h2><p>当设备驱动程序不使用 CMA 区域的时候，内核的其他模块可以借用 CMA 区域的物理页，页分配器只允许可移动类型从 CMA 类型借用物理页。</p><p>这里只介绍从 CMA 区域分配内存，整体的内存分配流程详见 <a href="./buddy">Buddy System 伙伴系统: Linux 物理内存分配</a></p><p>分配页面时，如果 gfp flags 带 <code>__GFP_MOVABLE</code>，那么：</p><ol><li><code>gfp_migratetype()</code> 返回值带有 <code>MIGRATE_MOVABLE</code></li><li><code>gfp_to_alloc_flags_cma()</code> 返回的 alloc_flags 带有 <code>ALLOC_CMA</code>，就意味着允许分配的页面被移动，也即，分配的页面可以来自于 CMA 区域。</li></ol><p>用户空间的内存需求一般都带 <code>__GFP_MOVABLE</code> 的，以一个匿名页 pagefault 为用户进程分配页面的流程为例：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_HIGHUSER_MOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">GFP_HIGHUSER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_MOVABLE | __GFP_SKIP_KASAN)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle_page_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_user_addr_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_anonymous_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alloc_anon_folio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_prealloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vma_alloc_folio_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GFP_HIGHUSER_MOVABLE, )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    folio_alloc_mpol_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc_pages_mpol_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__alloc_pages_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      get_page_from_freelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmqueue_buddy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__rmqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 经过一系列的调用，来到这里 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        __rmqueue_cma_fallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zone, order);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          __rmqueue_smallest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zone, order, MIGRATE_CMA)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* 从 zone-&gt;free_area[order]-&gt;free_list[MIGRATE_CMA] 空闲页面链表里取出页面 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            area </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zone-&gt;free_area[current_order]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_page_from_free_area</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(area, migratetype);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>migratetype</code> 是同一个 pageblock 内的页面的属性。</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 没太搞懂，空闲页面被放到 buddy system 时，是怎么决定放到哪个 migratetype 的 freelist 上的？ 我只理解 <code>MIGRATE_CMA</code> 需要放到单独的链表上，当为什么其他类型的不能放在同一个链表上？</li></ul><p>注意，<code>MIGRATE_CMA</code> 和 <code>MIGRATE_MOVABLE</code> 是有区别的， 前者只能分配的页面必须可以被移动；后者实际上可以被窃取被用于分配不可被移动的页面？</p><h2 id="设备驱动从-cma-区域分配内存" tabindex="-1">设备驱动从 CMA 区域分配内存 <a class="header-anchor" href="#设备驱动从-cma-区域分配内存" aria-label="Permalink to “设备驱动从 CMA 区域分配内存”">​</a></h2><p>当设备驱动程序需要使用 CMA 区域的时候，如果 CMA 区域中的物理页已经被页分配器分配出去，需要把物理页迁移到其他地方。</p><p>或者是初始化 dma pool 时，</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dma_atomic_pool_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__dma_atomic_pool_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atomic_pool_expand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  dma_alloc_from_contiguous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__cma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者是 dma-buf 分配 buffer 时</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dma_heap_buffer_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ops-&gt;allocate:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_heap_allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>讲述下流程：</p><ol><li>在 cma.c 这一层，通过在位图中查找，来找到一块连续的未被分配的区域</li><li>调用 <code>alloc_contig_range_noprof()</code> 函数，从 buddy system 中分配指定的这块区域。 <ol><li>参数约束：指定的范围内的 pageblock，必须是相同类型，并且要么是 MIGRATE_MOVABLE 要么是 MIGRATE_CMA</li></ol></li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__cma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 通过在位图中查找空闲区域，确认要分配的连续物理页面范围 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 从 buddy system 中拿出这部分连续物理页面。 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alloc_contig_range_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pfn, pfn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count, MIGRATE_CMA, gfp)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 该范围内的物理页面，可能不在 MIGRATE_CMA 已经被借用走了，比如被用于作为用户进程的私有匿名页，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    因此需要进行迁移 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 把物理页的迁移类型设置为隔离类型 MIGRATE_ISOLATE 隔离物理页，防止页分配器把空闲页分配出去 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    start_isolate_page_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 将所在 zone 内的 pcp list 里的页面都还回到 buddy system */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    drain_all_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 处理已经被 buddy system 分配出去的物理页 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __alloc_contig_migrate_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 回收干净的页，文件页不可移动，只可回收//XXX 这是为什么 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      reclaim_clean_pages_from_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 将可移动的页迁移到其他地方 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 处理空闲页，把空闲页从 buddy system 中删除 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    isolate_freepages_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 撤销 MIGRATE_ISOLATE 改为 MIGRATE_CMA */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    undo_isolate_page_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="设备驱动释放-cma-区域的内存" tabindex="-1">设备驱动释放 CMA 区域的内存 <a class="header-anchor" href="#设备驱动释放-cma-区域的内存" aria-label="Permalink to “设备驱动释放 CMA 区域的内存”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 检查页面是否属于 CMA 区域 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cma_pages_valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 将页面释放给 buddy system */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  free_contig_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 在 CMA 区域的位图中，把页的分配状态设置为空闲 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cma_clear_bitmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="sys-kernel-mm-cma" tabindex="-1">/sys/kernel/mm/cma/ <a class="header-anchor" href="#sys-kernel-mm-cma" aria-label="Permalink to “/sys/kernel/mm/cma/”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ls /sys/kernel/mm/cma/reserved/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alloc_pages_fail</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       alloc_pages_success</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    release_pages_success</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="一些碎碎念" tabindex="-1">一些碎碎念 <a class="header-anchor" href="#一些碎碎念" aria-label="Permalink to “一些碎碎念”">​</a></h2><h3 id="cma-failed-to-reserve-1024-mib-on-node-1" tabindex="-1">cma: Failed to reserve 1024 MiB on node -1 <a class="header-anchor" href="#cma-failed-to-reserve-1024-mib-on-node-1" aria-label="Permalink to “cma: Failed to reserve 1024 MiB on node -1”">​</a></h3><p>使用参数 <code>cma=1G@5G</code> 时，会让内核将 [5G, 6G) 作为 CMA 区域，但是我发现失败了，报错 cma: Failed to reserve 1024 MiB on node -1</p><p>加上 <code>memblock=debug</code> 参数，找到了原因</p><div class="language-log line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">用 memblock 在 [5G, 6G) 区域内分配了一小块内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005676</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] memblock_reserve: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000017ffd5300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000017fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] memblock_alloc_range_nid+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x1b0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005678</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] NODE_DATA(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) allocated [mem </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x17ffd5300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x17fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005885</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] memblock_reserve: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027ffd3300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027fffdfff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] memblock_alloc_range_nid+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x1b0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005887</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] NODE_DATA(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) allocated [mem </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x27ffd3300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x27fffdfff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005899</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] MEMBLOCK configuration:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  memory size = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000001fff7ec00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reserved size = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000004a32419</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005901</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">memory.cnt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005902</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  memory[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]     [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000001000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000000009efff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000000009e000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005905</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  memory[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]     [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007ffdffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007fee0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005906</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  memory[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]     [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000100000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000017fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000080000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005908</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  memory[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]     [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000180000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000100000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005909</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reserved.cnt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005909</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000000fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000001000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005911</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000001000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000000000fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000000000ff000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005912</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000001000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000004808fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000003809000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005914</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007ef09000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007ffd7fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000000010cf000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005915</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007ffe0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000007ffe2a18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000002a19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005916</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000017ffd5300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000017fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000000002ad00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005917</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027ffd3300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027fffdfff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000000002ad00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">005919</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  reserved[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]   [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027fffe000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x000000027fffffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000000002000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bytes on node </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">此时用 memblock 申请 [5G, 6G) 这块内存，会失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">006042</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] cma: Failed to reserve </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MiB on node -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>因此，不建议用这种写法，而是直接 <code>cma=1G</code> ？</p><h3 id="在某些情况下-cma-指定不了范围" tabindex="-1">在某些情况下 cma 指定不了范围？ <a class="header-anchor" href="#在某些情况下-cma-指定不了范围" aria-label="Permalink to “在某些情况下 cma 指定不了范围？”">​</a></h3><p>使用 <code>cma=1G@6G-8G</code> 参数，结果发现 CMA 区域是 [4G, 5G)，并不在 [6G, 8G) 的范围内。</p><div class="language-log line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">006569</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] cma: Reserved </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MiB at </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0000000100000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> on node -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>和这个 patch 有关： <a href="https://lore.kernel.org/all/20201217201214.3414100-1-guro@fb.com/" target="_blank" rel="noreferrer">[PATCH v2 1/2] mm: cma: allocate cma areas bottom-up - Roman Gushchin</a></p>`,59)]))}const c=i(p,[["render",e]]);export{g as __pageData,c as default};
