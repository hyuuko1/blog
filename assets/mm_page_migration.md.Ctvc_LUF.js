import{_ as i,c as a,o as n,aj as e}from"./chunks/framework.CcbH9oJh.js";const c=JSON.parse('{"title":"页面迁移（Page Migration）","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"页面迁移（Page Migration） | Blog"}]]},"headers":[],"relativePath":"mm/page_migration.md","filePath":"mm/page_migration.md","lastUpdated":1761828946000}'),l={name:"mm/page_migration.md"};function p(t,s,r,h,k,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="页面迁移-page-migration" tabindex="-1">页面迁移（Page Migration） <a class="header-anchor" href="#页面迁移-page-migration" aria-label="Permalink to “页面迁移（Page Migration）”">​</a></h1><p>推荐阅读：</p><ul><li><a href="https://lwn.net/Articles/157066/" target="_blank" rel="noreferrer">Page migration [LWN.net]</a></li><li><a href="https://lwn.net/Articles/160201/" target="_blank" rel="noreferrer">VM followup: page migration and fragmentation avoidance [LWN.net]</a></li><li><a href="https://lwn.net/Articles/1015551/" target="_blank" rel="noreferrer">A herd of migration discussions [LWN.net]</a></li><li><a href="https://lore.kernel.org/all/20051101031239.12488.76816.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/5] Swap Migration V5: Overview - Christoph Lameter</a></li><li><a href="https://lore.kernel.org/all/20060110224114.19138.10463.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/5] Direct Migration V9: Overview - Christoph Lameter</a></li><li><a href="https://cloud.tencent.com/developer/article/1681326" target="_blank" rel="noreferrer">宋宝华：论 Linux 的页迁移（Page Migration）完整版</a></li><li><a href="https://www.cnblogs.com/linhaostudy/p/17647370.html" target="_blank" rel="noreferrer">linux 那些事之页迁移(page migratiom) - yooooooo</a></li><li><a href="https://www.cnblogs.com/tolimit/p/5432674.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存碎片整理(同步关系) - tolimit - 博客园</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116138670?spm=1001.2014.3001.5501" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存规整 2---页间内容的迁移（__unmap_and_move 函数)</a></li><li><a href="https://blog.csdn.net/Linux_Everything/article/details/113667395" target="_blank" rel="noreferrer">LWN: 让 ZONE_MOVABLE 更加名副其实！-CSDN 博客</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/86498298" target="_blank" rel="noreferrer">对于 ZONE_MOVABLE 的理解_zone movable-CSDN 博客</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/105863277" target="_blank" rel="noreferrer">对于 MIGRATE_MOVABLE 的理解_movable migrate type-CSDN 博客</a></li><li><a href="https://www.cnblogs.com/aspirs/p/12781693.html" target="_blank" rel="noreferrer">内存管理中关于 Movable 的理解 - aspirs - 博客园</a></li></ul><p>why？依赖于页面迁移的技术（具体可以看 <code>enum migrate_reason</code>）：</p><ul><li>进程被迁移到其他 NUMA node 时，需迁移页面防止性能下降。这是页面迁移最初要解决的问题。</li><li><a href="./anti-fragmentation">内存反碎片</a><ul><li><a href="./compaction">内存规整</a></li><li><a href="./hotplug">内存热插拔</a></li><li><a href="./cma">CMA</a></li></ul></li><li><a href="./cow">CoW</a></li><li><a href="./thp">THP</a></li><li>syscall migrate_pages</li><li>Remapping of bad pages. These could be detected through soft ECC errors and other mechanisms. <a href="https://lwn.net/Articles/156603/" target="_blank" rel="noreferrer">https://lwn.net/Articles/156603/</a></li></ul><p>how？页面迁移依赖的技术：</p><ul><li><a href="./rmap">反向映射</a><ul><li>匿名页的反向映射</li><li>文件页的反向映射</li></ul></li><li><a href="./folio">页面引用计数</a></li></ul><p>什么会阻止页面交换？</p><ul><li>pin 住的页面</li><li>用于 direct I/O 的页面</li><li>有人在使用不能修改页表的映射</li></ul><h2 id="patch-swap-migration-v5" tabindex="-1">PATCH: Swap Migration V5 <a class="header-anchor" href="#patch-swap-migration-v5" aria-label="Permalink to “PATCH: Swap Migration V5”">​</a></h2><ul><li><a href="https://lore.kernel.org/all/Pine.LNX.4.62.0510131114140.14810@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH] Add page migration support via swap to the NUMA policy layer - Christoph Lameter</a></li><li><a href="https://lore.kernel.org/all/20051018004932.3191.30603.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/2] Page migration via Swap V2: Overview - Christoph Lameter</a></li><li><a href="https://lore.kernel.org/all/20051020225935.19761.57434.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/4] Swap migration V3: Overview - Christoph Lameter</a></li><li><a href="https://lore.kernel.org/all/20051025193023.6828.89649.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/5] Swap Migration V4: Overview - Christoph Lameter</a></li><li><a href="https://lore.kernel.org/all/20051101031239.12488.76816.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/5] Swap Migration V5: Overview - Christoph Lameter</a></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">21eac81f252f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Swap Migration V5: LRU operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	新增两个函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	isolate_lru_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 从 LRU 取出该 page 并将其放进 indicated list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	putpack_lru_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() 将链表上的 pages 放回 LRU</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">930</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">d915252ed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Swap Migration V5: PF_SWAPWRITE to allow writing to swap</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">49</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">d2e9cc4544</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Swap Migration V5: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cbe34cf86c6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Swap Migration V5: Add CONFIG_MIGRATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page migration support</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dc9aa5b9d65f [PATCH] Swap Migration V5: MPOL_MF_MOVE interface</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">39743889</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">aaf7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Swap Migration V5: sys_migrate_pages interface</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8419</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">c3181086</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] SwapMig: CONFIG_MIGRATION fixes</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1480</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">a540c985</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] SwapMig: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_to_swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() avoid atomic allocations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ee27497df368 [PATCH] SwapMig: Drop unused pages immediately</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d498471133ff [PATCH] SwapMig: Extend parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d0d963281ccb [PATCH] SwapMig: Switch error handling in migrate_pages to use </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Exx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>最初的实现方案：遍历进程的内存，并强制需要迁移的页面进行交换。当进程将页面重新加载到内存中时，它应该在进程的当前节点上分配。</p><h2 id="patch-direct-migration-v9" tabindex="-1">PATCH: Direct Migration V9 <a class="header-anchor" href="#patch-direct-migration-v9" aria-label="Permalink to “PATCH: Direct Migration V9”">​</a></h2><ul><li><a href="https://lore.kernel.org/all/20060110224114.19138.10463.sendpatchset@schroedinger.engr.sgi.com/" target="_blank" rel="noreferrer">[PATCH 0/5] Direct Migration V9: Overview - Christoph Lameter</a></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b16664e44c54 [PATCH] Direct Migration V9: PageSwapCache checks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a48d07afdf18 [PATCH] Direct Migration V9: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() extension</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a3351e525e47 [PATCH] Direct Migration V9: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove_from_swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() to remove swap ptes</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ab150d1b3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [PATCH] Direct Migration V9: upgrade MPOL_MF_MOVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sys_migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e965f9630c65 [PATCH] Direct Migration V9: Avoid writeback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page_migrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() method</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="系统调用" tabindex="-1">系统调用 <a class="header-anchor" href="#系统调用" aria-label="Permalink to “系统调用”">​</a></h2><p>migrate_pages</p><p>不是很常用吧</p><p>将指定 old_nodes 节点上属于进程 pid 的所有物理页迁移到 new_nodes 节点上</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SYSCALL_DEFINE4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(migrate_pages, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pid, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxnode,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, old_nodes,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, new_nodes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unmap_and_move</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_mempolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MPOL_MF_MOVE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="zone-movable" tabindex="-1">ZONE_MOVABLE <a class="header-anchor" href="#zone-movable" aria-label="Permalink to “ZONE_MOVABLE”">​</a></h2><ul><li><a href="https://www.cnblogs.com/LoyenWang/p/11568481.html" target="_blank" rel="noreferrer">【原创】（五）Linux 内存管理 zone_sizes_init - LoyenWang - 博客园</a></li><li>《Linux 内核深度解析》3.7.3 根据可移动性分组。</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 9 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pageblock_order</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		MIN_T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HUGETLB_PAGE_ORDER, MAX_PAGE_ORDER)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 512 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pageblock_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(1UL &lt;&lt; pageblock_order)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在系统长时间运行后，物理内存可能出现很多碎片，可用物理页很多，但是最大的连续物理内存可能只有一页。内存碎片对用户程序不是问题，因为用户程序可以通过页表把连续的虚拟页映射到不连续的物理页。但是内存碎片对内核是一个问题，因为内核使用直接映射的虚拟地址空间，连续的虚拟页必须映射到连续的物理页。</p><p>简单来说，可迁移的页面不一定都在 ZONE_MOVABLE 中，但是 ZONE_MOVABLE 中的页面必须都是可迁移的。</p><ul><li>给用户分配的匿名页，使用的是 <code>GFP_HIGHUSER_MOVABLE</code> 包含了 <code>__GFP_HIGHMEM | __GFP_MOVABLE</code>，意味着可以从 ZONE_MOVABLE 分配。</li><li>分配给内核使用的内存，都是不可移动的（因为存在线性映射，这个映射不能修改），所以不能从 ZONE_MOVABLE 分配。 <ul><li>XXX vmalloc 分配的内存，不是线性映射的，应该可以移动？为什么不从 ZONE_MOVABLE 分配呢？为什么要用 GFP_KERNEL 呢？</li><li>分配大页时，ZONE_MOVABLE 的内存因为可以直接迁移，所以从 ZONE_MOVABLE 分配大页应该比较容易？</li></ul></li></ul><h2 id="migratetype" tabindex="-1">migratetype <a class="header-anchor" href="#migratetype" aria-label="Permalink to “migratetype”">​</a></h2><p>为了预防内存碎片，内核根据可移动性把物理页分为 3 种类型（体现在：3 种类型的位于不同的 pcp list 里）。</p><ol><li>不可移动页：位置必须固定，不能移动，直接映射到内核虚拟地址空间的页，比如 kmalloc 申请的页面，属于这一类。</li><li>可移动页：使用页表映射的页属于这一类，可以移动到其他位置，然后修改页表映射。</li><li>可回收页：不能移动，但可以回收，需要数据的时候可以重新从数据源获取。后备存储设备支持的页属于这一类。</li></ol><p>内核把具有相同可移动性的页分组。为什么这种方法可以减少碎片？试想：如果不可移动页出现在可移动内存区域的中间，会阻止可移动内存区域合并。这种方法把不可移动页聚集在一起，可以防止不可移动页出现在可移动内存区域的中间。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 迁移类型 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migratetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 不可移动页，主要是内核分配的页（linux内核分配页很多是线性映射的页，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	这些页的虚拟地址和物理地址是通过固定的偏移进行映射的，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	因此不能将物理页的内容移动到其他空闲物理页中） */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_UNMOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 可移动页，能将页中的内容迁移到其他物理页中，主要是一些用户空间分配的页 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_MOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 可回收页，不能迁移，但能进行回收处理 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_RECLAIMABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_PCPTYPES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* the number of types on the pcp lists */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_HIGHATOMIC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MIGRATE_PCPTYPES,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_CMA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* MIGRATE_CMA 被设计成模拟 ZONE_MOVABLE 工作的方式， */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * MIGRATE_CMA migration type is designed to mimic the way</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * ZONE_MOVABLE works.  Only movable pages can be allocated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * from MIGRATE_CMA pageblocks and page allocator never</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * implicitly change migration type of MIGRATE_CMA pageblock.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * The way to use it is to change migratetype of a range of</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * pageblocks to MIGRATE_CMA which can be done by</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * __free_pageblock_cma() function.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_CMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_MEMORY_ISOLATION</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_ISOLATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* can&#39;t allocate from here */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_TYPES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>MIGRATE_RECLAIMABLE 不可以迁移，但是可以回收，主要是 SLAB，而非 page cache。 从 inode_init_always_gfp()-&gt;mapping_set_gfp_mask(mapping, GFP_HIGHUSER_MOVABLE) 克制 page cache 是 MIGRATE_MOVABLE，而不是 MIGRATE_RECLAIMABLE，很多博客文章都写错了。</p><p>前面 3 种是真正的迁移类型，后面的迁移类型都有特殊用途： MIGRATE_HIGHATOMIC 用于高阶原子分配，MIGRATE_CMA 用于连续内存分配器，MIGRATE_ISOLATE 用来隔离物理页（由连续内存分配器、内存热插拔和从内存硬件错误恢复等功能使用）。</p><p>pageblock_order 是按可移动性分组的阶数，简称分组阶数，可以理解为一种迁移类型的一个页块的最小长度。如果内核支持巨型页，那么 pageblock_order 是巨型页的阶数，否则 pageblock_order 是伙伴分配器的最大分配阶。</p><p>同一个 pageblock 内的页面，迁移类型是相同的。</p><p>TODO 疑问：为啥会有 pageblock 这种东西。有了 pageblock 后，就有很多连续 2M 的相同的迁移类型的页面，感觉确实有利于做页面迁移得到更多连续页。</p><p>申请某种迁移类型的页时，如果这种迁移类型的页用完了，可以从其他迁移类型盗用（steal）物理页。 如果需要从备用类型盗用物理页，那么从最大的页块开始盗用，以避免产生碎片。 内核定义了每种迁移类型的备用类型优先级列表：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fallbacks[MIGRATE_PCPTYPES][MIGRATE_PCPTYPES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[MIGRATE_UNMOVABLE]   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MIGRATE_RECLAIMABLE, MIGRATE_MOVABLE   },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[MIGRATE_MOVABLE]     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MIGRATE_RECLAIMABLE, MIGRATE_UNMOVABLE },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[MIGRATE_RECLAIMABLE] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MIGRATE_UNMOVABLE,   MIGRATE_MOVABLE   },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数 <code>set_pageblock_migratetype()</code> 用来在页块标志位图中设置页块的迁移类型，函数 <code>get_pageblock_migratetype()</code> 用来获取页块的迁移类型。</p><p><strong>内核在初始化时，把所有页块初始化为可移动类型，其他迁移类型的页是盗用产生的。</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memmap_init_zone_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  memmap_init_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(, MIGRATE_MOVABLE)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看各种迁移类型的页的分布情况</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/pagetypeinfo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,43)]))}const o=i(l,[["render",p]]);export{c as __pageData,o as default};
