import{_ as i,c as a,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const g=JSON.parse('{"title":"rmap 反向映射","description":"rmap 反向映射原理，代码分析","frontmatter":{"description":"rmap 反向映射原理，代码分析","head":[["meta",{"name":"keywords","content":"rmap, 反向映射, linux, kernel, 原理, 代码分析"}],["meta",{"property":"og:title","content":"rmap 反向映射 | Blog"}]]},"headers":[],"relativePath":"mm/rmap.md","filePath":"mm/rmap.md","lastUpdated":1761828946000}'),p={name:"mm/rmap.md"};function e(h,s,k,t,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="rmap-反向映射" tabindex="-1">rmap 反向映射 <a class="header-anchor" href="#rmap-反向映射" aria-label="Permalink to “rmap 反向映射”">​</a></h1><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><ul><li>🌟<a href="http://www.wowotech.net/memory_management/reverse_mapping.html" target="_blank" rel="noreferrer">逆向映射的演进</a><strong>整个演进历程讲的很好，必看</strong></li><li>🌟<a href="https://www.cnblogs.com/tolimit/p/5398552.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存回收(匿名页反向映射) - tolimit - 博客园</a> 几乎每行都有注释</li><li>🌟<a href="https://blog.csdn.net/u010923083/article/details/116456497" target="_blank" rel="noreferrer">[内核内存] 反向映射详解</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/12164683.html" target="_blank" rel="noreferrer">【原创】（十五）Linux 内存管理之 RMAP - LoyenWang - 博客园</a></li><li><a href="https://www.cnblogs.com/arnoldlu/p/8335483.html" target="_blank" rel="noreferrer">Linux 内存管理 (12)反向映射 RMAP - ArnoldLu - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/564867734" target="_blank" rel="noreferrer">内存管理特性分析（三）：linux 内核反向映射(RMAP)技术分析 - 知乎</a></li><li><a href="https://blog.csdn.net/u012489236/article/details/114734823" target="_blank" rel="noreferrer">linux 内存管理笔记(三十八）----反向映射-CSDN 博客</a></li></ul><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to “概览”">​</a></h2><ol><li><p>反向映射是什么？</p><p>反向映射是从物理页面到虚拟地址空间 VMA。即，给定一个 <code>struct page</code>，得到所有映射了该物理页面的 <code>struct vm_area_struct</code>，进而得到所有虚拟地址，然后 wakt page table 得到 pte。</p><p>不同虚拟页面同时映射到同一物理页面是因为子进程克隆父进程 VMA，和 KSM 机制的存在。</p></li><li><p>为什么需要反向映射？</p><p>典型应用场景：</p><ul><li>kswapd 进行页面回收时，需要断开所有映射了该匿名页面的 PTE 表项；</li><li>页面迁移时，需要断开所有映射了该匿名页面的 PTE 表项；</li></ul></li></ol><p>入口函数 <code>rmap_walk()</code> 或 <code>rmap_walk_locked()</code></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rmap_walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">folio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rmap_walk_control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rwc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_test_ksm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio)))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rmap_walk_ksm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, rwc);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_test_anon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rmap_walk_anon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, rwc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rmap_walk_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, rwc, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>用法</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rmap_walk_control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rwc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .rmap_one </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 钩子,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmap_walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rwc);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to “前置知识”">​</a></h2><p><code>struct folio</code> 的 <code>mapping</code> 和 <code>index</code> 字段在不同场景含义不同，详见 <a href="./folio">folio</a></p><p><code>struct vm_area_struct</code> 的 <code>pgoff</code> 字段在不同场景含义不同，详见 <a href="./vma">vma</a></p><h2 id="🚧-ksm-页的反向映射" tabindex="-1">🚧 KSM 页的反向映射 <a class="header-anchor" href="#🚧-ksm-页的反向映射" aria-label="Permalink to “🚧 KSM 页的反向映射”">​</a></h2><h2 id="文件页的反向映射" tabindex="-1">文件页的反向映射 <a class="header-anchor" href="#文件页的反向映射" aria-label="Permalink to “文件页的反向映射”">​</a></h2><p>每个文件都拥有一个区间树（建立在红黑树之上的一种扩展数据结构），名为 i_mmap，许多 VMA 挂在上面，排序依据是 VMA 起始位置在文件内的偏移（单位 4KB）。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> address_space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 基于 rbtree 的 interval tree */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rb_root_cached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	i_mmap;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>何时添加进 interval tree 的？</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vma_link_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file-&gt;f_mapping;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    i_mmap_lock_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapping);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __vma_link_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, mapping);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 添加进 interval tree */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      vma_interval_tree_insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mapping-&gt;i_mmap);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    i_mmap_unlock_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapping);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>反向映射</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmap_walk_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 对于文件页，这个就是文件内的偏移量，单位为 4KB */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pgoff_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folio-&gt;index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pgoff_end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pgoff_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 遍历 interval tree 内 [vma-&gt;vm_pgoff, vma-&gt;vm_pgoff+页面数] 与 [pgoff_start, pgoff_end] 相交的 VMA，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     对于文件页，vma-&gt;vm_pgoff 其实就是 VMA 起始位置在文件内的偏移，单位为4KB */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vma_interval_tree_foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mapping-&gt;i_mmap, pgoff_start, pgoff_end)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vma_address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, pgoff_start, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rwc-&gt;invalid_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalid_vma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, rwc-&gt;arg))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmap_one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, vma, address, rwc-&gt;arg))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rwc-&gt;done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="匿名页的反向映射" tabindex="-1">匿名页的反向映射 <a class="header-anchor" href="#匿名页的反向映射" aria-label="Permalink to “匿名页的反向映射”">​</a></h2><p>这块还挺难理解的为什么这样设计的。我们以对用户进程的私有匿名页为例。</p><p>先解释一下各个名词，方便查阅。</p><ul><li>page: <code>struct page</code> 代表物理页面 <ul><li>作为匿名页时，指向一个 AV。</li><li>多个匿名页可以共用一个 AV。<strong>这么做的目的是为了节省内存</strong>，设计成了这样子：被同一个 VMA 映射的 page 可以共用同一个 AV，当然有个例外是，如果该 page 是父进程 fork 之后还未 Cow 的，那该 page 用的是父进程的 AV。</li><li>page 指向的 AV 是一个区间树，通过遍历可以得到许多 VMA，这些 VMA 的虚拟页面<strong>有可能</strong>映射了该 page。</li></ul></li><li>VMA: <code>struct vm_area_struct</code><ul><li>是一段虚拟地址区域，包含多个虚拟页面，这些虚拟页面可能还未映射到真正的物理页面，要 page fault 之后才会。</li><li>对于私有匿名映射，在 fork 后，子进程的 VMA 里的虚拟页面与父进程映射到了同一个页面。发生 CoW 后，才会映射到不同的物理页面。</li></ul></li><li>AV: <code>struct anon_vma</code> 是一个区间树 <ul><li>当 VMA 范围内的虚拟页面有映射到实际的物理页面时，就会为 VMA 创建一个 AV。我觉得，可以认为是 VMA “拥有” AV</li><li>VMA 会挂到 AV 区间树上。</li><li>与 VMA 的数量比是 1:1。但是，一个 VMA 可以同时挂在不同的 AV 区间树上。</li></ul></li><li>AVC: <code>struct anon_vma_chain</code><ul><li>前面提到 VMA 可以挂到 AV 区间树上，但是我们会发现 VMA 里只有一个 <code>struct rb_node</code>（被用于挂在到 address_space 的 i_mmap 上，不是用于匿名页用途的？），难道，并没有用于挂到 AV 区间树上的 <code>struct rb_node</code>？ 那么，VMA 是如何挂到 AV 区间树的呢？ 答案就是通过 AVC 链表！！每个 VMA 都有一个 AVC 链表 <code>anon_vma_chain</code>（函数 <code>anon_vma_chain_link()</code> 往链表里添加新的 AVC） 每个 AVC 里有一个 <code>struct rb_node</code>，挂到 AV 区间树上。AVC 指向它所属的 VMA。因此在逻辑上可以认为是 VMA 挂在 AV 区间树上。 我觉得，可以这样认为，VMA 拥有多个 AVC，通过 N 个 AVC，挂到 N 个不同的 AV 区间树上。</li><li>为什么不直接在 VMA 里新增一个 <code>struct rb_node</code> 用于挂到 AV 区间树上呢？ 答：这样只能支持 VMA 挂到单个 AV 区间树。为了支持挂到多个 AV 区间树上，才引入了 AVC。</li></ul></li></ul><p>为了方便理解上面的这些设计，什么 AV、AVC 啥的，让我们先自己设计一下，看看有啥缺陷。 注意：以下设计过程与真实的演进历史并不一样。</p><p>首先，明确我们的需求：给定一个 folio，得到所有的有虚拟页面映射了该 folio 的 VMA。</p><p>很容易想到，我们可以参考文件页的匿名映射。 让每个匿名页都拥有一个链表，称之为 AV。 假设有 10 个 VMA，每个 VMA 里有 20 个虚拟页面。 这 10 个 VMA 各自都有 1 个虚拟页面映射到了同一个匿名页，我们可以为这 10 个虚拟页面分配 10 个链表节点，都挂到该 AV 链表上。 这样以来，给定一个 page，我们可以遍历这个页表，得到 10 个虚拟页面地址，然后做一些 unmap 之类的操作。 有个明显的缺点：太浪费内存了，需要为每个页面映射分配内存。10 个 VMA 里共 200 个虚拟页面，如果都建立映射，就需要 200 个链表节点。</p><p>我们可以修改需求，放宽一点：给定一个 folio，得到所有的、<strong>可能</strong>有虚拟页面映射了该 folio 的 VMA。 然后，让被同一个 VMA 映射的匿名页共同拥一个 AV 区间树，有个例外是，如果该 page 是父进程 fork 之后还未 Cow 的，那该 page 用的是父进程的 AV。AV 区间树是 VMA 粒度的，为 VMA 创建 AV 后，会把 VMA 挂到区间树上。这样以来，给定一个 page，就可以遍历区间树得到 VMA，得到虚拟地址。</p><p>当发生 fork 时，将父进程的 VMA 复制到子进程，子进程有了 10 个 VMA，然后为这 10 个 VMA 创建 10 个 AV，10 个 VMA 分别挂到 10 个 AV 上。由于我们并未为子进程分配物理页面，所以物理页面仍然是指向父进程的 AV 的，因此我们还要把子进程的 VMA 挂到父进程的 AV 上。这样一来，给定一个 page，我们可以遍历 AV 区间树，得到父子进程的 VMA，进而得到两个虚拟地址。</p><p>page1 发生 CoW 后，为子进程分配新的物理页面 page1_c，让该页面指向子进程自己的 AV。 有个问题是，此时，对于父进程，给定 page1，遍历 AV，得到的仍然是两个 VMA，其中子进程的 VMA 已经不再映射到 page1 了而是 page1_c。 但我们也没办法把子进程的 VMA 从这个 AV 中移除，除非该 VMA 内的所有 page 都发生 CoW 了。 现在的内核代码里也没怎么做，我猜这是因为这样更复杂了，而且 VMA 内所有 page 都发生 CoW 这种情况也很少发生？</p><h3 id="申请匿名页" tabindex="-1">申请匿名页 <a class="header-anchor" href="#申请匿名页" aria-label="Permalink to “申请匿名页”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">do_anonymous_page</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vmf_anon_prepare-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__vmf_anon_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">likely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma-&gt;anon_vma))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __anon_vma_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      avc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anon_vma_chain_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GFP_KERNEL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anon_vma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      vma-&gt;anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anon_vma;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      anon_vma_chain_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, avc, anon_vma);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        avc-&gt;vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vma;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        avc-&gt;anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anon_vma;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        list_add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">avc-&gt;same_vma, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vma-&gt;anon_vma_chain);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        anon_vma_interval_tree_insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(avc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anon_vma-&gt;rb_root);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="fork" tabindex="-1">fork <a class="header-anchor" href="#fork" aria-label="Permalink to “fork”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dup_mmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vm_area_dup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vm_area_struct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kmem_cache_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm_area_cachep, GFP_KERNEL);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 复制父进程的 VMA */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, orig, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  anon_vma_fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 不继承父进程的 AV */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vma-&gt;anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 复制父进程的 VMA 指向的一些内容 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anon_vma_clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, pvma)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 遍历父进程的 AVC */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      list_for_each_entry_reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pavc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src-&gt;anon_vma_chain, same_vma)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        avc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anon_vma_chain_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GFP_NOWAIT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __GFP_NOWARN);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 将新创建的 AVC 放进子进程 VMA 链表，但放进父进程 AV 区间树 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pavc-&gt;anon_vma;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        anon_vma_chain_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dst, avc, anon_vma);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 子进程自己参创建新的 AV */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anon_vma_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 再次创建一个 AVC */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    avc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> anon_vma_chain_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GFP_KERNEL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anon_vma-&gt;root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pvma-&gt;anon_vma-&gt;root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anon_vma-&gt;parent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pvma-&gt;anon_vma;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vma-&gt;anon_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anon_vma;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 将第二个 AVC 放进子进程自己的 VMA 链表，和自己的 AV 区间树内 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anon_vma_chain_link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, avc, anon_vma);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="cow" tabindex="-1">CoW <a class="header-anchor" href="#cow" aria-label="Permalink to “CoW”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle_mm_fault-&gt;__handle_mm_fault-&gt;handle_pte_fault</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* wp 是 write protect 的意思？ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_wp_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wp_page_copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      vmf_anon_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 实际上已经分配了 AV，所以很快就返回了 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 分配物理页面 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      new_folio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_prealloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, vma, vmf-&gt;address, pfn_is_zero);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 拷贝 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      __wp_page_copy_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_folio-&gt;page, vmf-&gt;page, vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      folio_add_new_anon_rmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_folio, vma, vmf-&gt;address, RMAP_EXCLUSIVE);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        __folio_set_anon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, vma, address, exclusive);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* 新创建的 folio 指向子进程自己的 AV */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          WRITE_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio-&gt;mapping, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> address_space</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) anon_vma);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="反向映射" tabindex="-1">反向映射 <a class="header-anchor" href="#反向映射" aria-label="Permalink to “反向映射”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmap_walk_anon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 对于匿名私有页，这个就是虚拟页面号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     对于匿名共享页，这个就是相对于 vma-&gt;vm_start 的偏移量 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pgoff_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folio-&gt;index;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pgoff_end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pgoff_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 遍历 interval tree 内 [vma-&gt;vm_pgoff, vma-&gt;vm_pgoff+页面数] 与 [pgoff_start, pgoff_end] 相交的 VMA，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     对于匿名私有页，vma-&gt;vm_pgoff 其实就是 vm_start 起始地址虚拟页面号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     对于匿名共享页，vma-&gt;vm_pgoff 等于 0 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  anon_vma_interval_tree_foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(avc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">anon_vma-&gt;rb_root, pgoff_start, pgoff_end)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vm_area_struct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> avc-&gt;vma;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vma_address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, pgoff_start, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rwc-&gt;invalid_vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invalid_vma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, rwc-&gt;arg))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rmap_one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, vma, address, rwc-&gt;arg))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rwc-&gt;done </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rwc-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="rmap-one-钩子" tabindex="-1"><code>rmap_one</code> 钩子 <a class="header-anchor" href="#rmap-one-钩子" aria-label="Permalink to “rmap_one 钩子”">​</a></h2><p>不管是文件页还是匿名页，遍历 i_mmap 或 anon_vma-&gt;rb_root 得到的 VMA 内不一定就真的映射了这个 folio，因为：</p><ol><li>对于文件页，页面可能还不在 page cache 里</li><li>对于匿名页，子进程可能已经发生了 CoW，映射到了新分配的 page，此时子进程的发生 CoW 的页面所属的 VMA 还挂在父进程的 AV 区间树上。</li></ol><p>因此可以看到 <code>rmap_one</code> 钩子都会调用 <code>page_vma_mapped_walk()</code> 函数，如果 VMA 并没有映射这个 folio，就会直接返回。以 <code>try_to_unmap_one()</code> 为例：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">try_to_unmap_one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  DEFINE_FOLIO_VMA_WALK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pvmw, folio, vma, address, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .pfn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_pfn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_folio),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .nr_pages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_nr_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_folio),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		.pgoff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_pgoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_folio),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果 folio 不在 vma 内，page_vma_mapped_walk 会返回 false */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">page_vma_mapped_walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pvmw)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">page_vma_mapped_walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果 VMA 真的映射了这个 folio，就返回 true */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check_pte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pvmw))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,43)]))}const c=i(p,[["render",e]]);export{g as __pageData,c as default};
