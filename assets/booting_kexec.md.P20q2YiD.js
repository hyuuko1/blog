import{_ as i,c as a,o as n,aj as e}from"./chunks/framework.CcbH9oJh.js";const c=JSON.parse('{"title":"kexec","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"kexec | Blog"}]]},"headers":[],"relativePath":"booting/kexec.md","filePath":"booting/kexec.md","lastUpdated":1761828946000}'),l={name:"booting/kexec.md"};function p(h,s,k,t,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="kexec" tabindex="-1">kexec <a class="header-anchor" href="#kexec" aria-label="Permalink to “kexec”">​</a></h1><p>主要的应用场景：</p><ol><li>kdump (kexec on panic)</li><li>云服务器厂商用这个做内核热升级。用户态的可能要 CRIU。 还有 Kexec HandOver (KHO)、双 OS 热升级等方案。</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><ul><li><a href="https://docs.kernel.org/admin-guide/kdump/kdump.html" target="_blank" rel="noreferrer">Kdump - The kexec-based Crash Dumping Solution — The Linux Kernel documentation</a></li><li>🌟<a href="https://www.cnblogs.com/lianyihong/p/17911774.html" target="_blank" rel="noreferrer">【内核】kernel 热升级-1：kexec 机制 - _hong - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/104292358" target="_blank" rel="noreferrer">3.3.2 内核态调测工具：kdump&amp;crash——kdump - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/104384020" target="_blank" rel="noreferrer">3.3.3 内核态调测工具：kdump&amp;crash——crash 解析 - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/o89Z75IQgah75eW0_qHBtw" target="_blank" rel="noreferrer">Linux Kdump 机制详解</a></li><li><a href="https://wiki.archlinux.org/title/Kexec" target="_blank" rel="noreferrer">Kexec - ArchWiki</a></li><li><a href="https://wiki.archlinux.org/title/Kdump" target="_blank" rel="noreferrer">Kdump - ArchWiki</a></li><li><a href="https://github.com/yifengyou/crash" target="_blank" rel="noreferrer">yifengyou/crash: 内核 crash 分析</a></li><li>🌟<a href="https://github.com/freelancer-leon/notes/blob/master/kernel/kexec.md" target="_blank" rel="noreferrer">https://github.com/freelancer-leon/notes/blob/master/kernel/kexec.md</a></li><li>🌟<a href="https://github.com/freelancer-leon/notes/blob/master/kernel/kexec_x86.md" target="_blank" rel="noreferrer">https://github.com/freelancer-leon/notes/blob/master/kernel/kexec_x86.md</a></li><li>🌟<a href="https://github.com/freelancer-leon/notes/blob/master/kernel/kdump.md" target="_blank" rel="noreferrer">https://github.com/freelancer-leon/notes/blob/master/kernel/kdump.md</a></li><li><a href="https://www.thegoodpenguin.co.uk/blog/booting-linux-from-linux-with-kexec/" target="_blank" rel="noreferrer">Booting Linux from Linux with kexec – The Good Penguin</a></li><li>🌟<a href="https://eastrivervillage.com/kexec-tools-with-the-hidden-purgatory/" target="_blank" rel="noreferrer">kexec - A travel to the purgatory</a></li><li>🌟<a href="https://blog.csdn.net/OurBMC/article/details/143425496" target="_blank" rel="noreferrer">玩转 OurBMC 第十二期：kdump 原理分析（下）</a></li></ul><h2 id="用户态工具-kexec-tools" tabindex="-1">用户态工具 kexec-tools <a class="header-anchor" href="#用户态工具-kexec-tools" aria-label="Permalink to “用户态工具 kexec-tools”">​</a></h2><ul><li><a href="https://github.com/horms/kexec-tools" target="_blank" rel="noreferrer">https://github.com/horms/kexec-tools</a></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -l 和 -p 都会通过 kexec_load() / kexec_file_load() 系统调用来加载内核，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 但是加载的内核的用途不一样，-p 加载的是在 panic 时执行的 crash kernel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kexec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/vmlinux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --append=root=/dev/hda1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --initrd=/boot/initrd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kexec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /boot/vmlinux</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --append=root=/dev/hda1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --initrd=/boot/initrd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kexec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* kexec/kexec.c */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPT_LOAD:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* -l */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    has_opt_load </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_load </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_shutdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPT_PANIC:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* -p */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_load </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_shutdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kexec_file_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEXEC_FILE_ON_CRASH;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 传给 kexec_file_load() 的参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kexec_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEXEC_ON_CRASH;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 传给 kexec_load() 的参数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OPT_EXEC:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* -e */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_load </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_shutdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_sync </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_ifdown </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_exec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="内核加载-kexec-load-kexec-file-load-系统调用" tabindex="-1">内核加载：kexec_load() / kexec_file_load() 系统调用 <a class="header-anchor" href="#内核加载-kexec-load-kexec-file-load-系统调用" aria-label="Permalink to “内核加载：kexec_load() / kexec_file_load() 系统调用”">​</a></h2><p>kexec_file_load() 在内核内解析新内核，不像 kexec_load() 那样需要先在用户态解析新内核。</p><p>kexec 在内核加载阶段，于内存中创建了一张 控制表 control_code_page，用于存放重定向新内核地址的控制代码。这段控制代码名为</p><p>Kexec 会将用户传递的内核，initrd 等信息存储在 kexec_info 中的 segment 中，其中有很多代码都是在处理这部分内容。</p><p>流程简述：</p><ol><li>vmalloc 申请两块内存，放置通过用户态传过来的 fd 读取的 linux/initrd image</li><li>kzalloc 申请内存，放置 boot_params + cmdline + setup_data + efi_setup_data 等内容</li><li>将这 3 块内存地址用 <code>kexec_add_buffer()</code> 函数记录好 <code>ksegment-&gt;kbuf</code>，并从 iomem_resource 分配好最终拷贝到的连续内存 <code>ksegment-&gt;mem</code>。</li><li>...</li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 指向一个 kimage_entry_t 数组 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	kimage_entry_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 指向数组末尾的那个 entry */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        kimage_entry_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entry;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_segment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> segment[KEXEC_SEGMENT_MAX];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 用户态传过来的内核、initrd文件内容，和命令行 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kernel_buf;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kernel_buf_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initrd_buf;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initrd_buf_len;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cmdline_buf;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmdline_buf_len;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 用于函数调用时传递参数。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_buf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 分配的内存。新内核的内容最终会拷贝到这里 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufsz;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* void *buffer 的大小 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memsz;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 加上 bss 后的大小 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf_align;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf_min;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* buffer 地址范围 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf_max;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top_down;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 分配的方向 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_segment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buf;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kbuf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufsz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mem;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memsz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SYSCALL_DEFINE5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kexec_file_load, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kernel_fd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initrd_fd,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmdline_len, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmdline_ptr,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (image_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEXEC_TYPE_CRASH)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dest_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kexec_crash_image;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kexec_crash_image)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        arch_kexec_unprotect_crashkres</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dest_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kexec_image;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 释放上一次加载的 crash kernel */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEXEC_FILE_ON_CRASH)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kimage_free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kexec_crash_image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 读取内核和 initrd，分配并初始化 struct kimage */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kimage_file_alloc_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image, kernel_fd, initrd_fd, cmdline_ptr, cmdline_len, flags);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_kimage_alloc_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kexec_on_panic)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      image-&gt;control_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crashk_res.start;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kimage_file_prepare_segments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, kernel_fd, initrd_fd, cmdline_ptr, cmdline_len, flags);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 读取内核文件内容到内核 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      kernel_read_file_from_fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kernel_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image-&gt;kernel_buf)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 对新内核的 setup_header 做一些校验 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      arch_kexec_kernel_image_probe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bzImage64_probe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 读取 initrd 文件内容到内核 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      kernel_read_file_from_fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initrd_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image-&gt;initrd_buf)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 拷贝来自用户态的内核启动参数 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      image-&gt;cmdline_buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memdup_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cmdline_ptr, cmdline_len);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      image-&gt;image_loader_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_image_load_default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bzImage64_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 在 crash dump 的情况下，会追加 elfcorehdr=&lt;addr&gt; 启动参数，检查是否放得下。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           XXX 这里是否放个 image-&gt;type == KEXEC_TYPE_CRASH &amp;&amp; 比较好？ */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cmdline_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX_ELFCOREHDR_STR_LEN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header-&gt;cmdline_size) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ERR_PTR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EINVAL);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* TODO 如果是 crash kernel，没看懂 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (image-&gt;type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KEXEC_TYPE_CRASH) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crash_load_segments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 加载 purgatory */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kexec_load_purgatory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pbuf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 分配内存，用于放置 struct boot_params + cmdline + efi memmap +</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        struct setup_data + struct efi_setup_data + struct setup_data + rng seed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        然后拷贝 setup header 到 boot_params 中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kzalloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kbuf.bufsz, GFP_KERNEL);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params-&gt;hdr, (kernel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setup_hdr_offset), setup_header_size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        kbuf.buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kexec_add_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kbuf);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 把这块内存记录到 kexec_segment 数组中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        kbuf.buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kernel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kern16_size;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kexec_add_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kbuf);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 把 kernel 这块内存区域记录到 kexec_segment 数组中 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        kbuf.buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initrd;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kexec_add_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kbuf);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 把 initrd 这块内存区域记录到 kexec_segment 数组中 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 在 boot_params 的 setup header 里设置好 initrd 的地址 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setup_initrd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(params, initrd_load_addr, initrd_len);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 设置好命令行，并在 boot_params 的 setup header 里设置好命令行地址 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setup_cmdline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 设置好进入 purgatory 时的寄存器 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 设置好 boot_params 里的一些内容 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setup_boot_parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 分配 loader specific data */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kzalloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(struct bzimage64_data), GFP_KERNEL);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 分配 control_code_page */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    image-&gt;control_code_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage_alloc_control_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KEXEC_CONTROL_PAGE_SIZE));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 如果是 crash kernel 则 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    image-&gt;swap_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage_alloc_control_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  machine_kexec_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 初始化恒等映射页表 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    init_pgtable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__pa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(control_page));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 复制用于重定向新内核地址的控制代码到 control_code_page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">control_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page_address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image-&gt;control_code_page);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(control_page, __relocate_kernel_start, reloc_end </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reloc_start);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 遍历 kexec_segment 数组，分配页面，并拷贝，页面会记录在 kimage_entry_t 数组里。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  XXX 没搞懂拷贝时为什么要临时 kmap 一下 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image-&gt;nr_segments; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kimage_load_segment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image-&gt;segment[i]);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kimage_terminate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kexec_post_load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image, flags);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 释放内存 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kimage_file_post_load_cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 最终完成修改，为啥要用 xchg？不是已经有锁保护了吗 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xchg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dest_image, image);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  arch_kexec_protect_crashkres</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kexec_unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 释放上一次加载的 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kimage_free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br></div></div><p>一些函数</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 将一个 buffer 添加到 struct kimage 的 struct kexec_segment segment[KEXEC_SEGMENT_MAX]; 数组内。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 还会从 iomem_resource 划分一个内存区域 kbuf-&gt;mem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //XXX 如何确保和当前内核代码段之类的不重合的？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_add_buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 我猜是这样的：因为我们大概率没法申请到一块那么大的空闲连续内存，所以先划分一块，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 分配页面，把页面信息记录在 image-&gt;head 数组里，并把新内核拷贝到页面里。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *（如果页面恰好就在那块空闲连续内存里，那还会记录在 image-&gt;dest_pages 链表里）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 到 machine_kexec()-&gt;relocate_kernel_ptr() 时，才把这些页面的内容拷贝到这块连续的内存。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 而 crash kernel 不用这样做：我们已经为 crash kernel 预留了连续内存，可以在现在就直接拷贝过去。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage_load_normal_segment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_segment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">segment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="内核执行-reboot-linux-reboot-cmd-kexec-系统调用" tabindex="-1">内核执行：reboot(LINUX_REBOOT_CMD_KEXEC) 系统调用 <a class="header-anchor" href="#内核执行-reboot-linux-reboot-cmd-kexec-系统调用" aria-label="Permalink to “内核执行：reboot(LINUX_REBOOT_CMD_KEXEC) 系统调用”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SYSCALL_DEFINE4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reboot, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, magic1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, magic2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cmd, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arg)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kernel_kexec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kexec_in_progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kexec_in_progress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kernel_restart_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kexec reboot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    migrate_to_reboot_cpu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    syscore_shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cpu_hotplug_enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pr_notice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Starting new kernel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    machine_shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kmsg_dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KMSG_DUMP_SHUTDOWN);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    machine_kexec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kexec_image);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      local_irq_disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      control_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page_address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image-&gt;control_code_page);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      reloc_start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)__relocate_kernel_start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      relocate_kernel_ptr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> control_page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)relocate_kernel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reloc_start;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      load_segments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 将 ds,es 等寄存器都置 0 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      relocate_kernel_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)image-&gt;head,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			   virt_to_phys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(control_page),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			   image-&gt;start,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			   image-&gt;preserve_context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			   host_mem_enc_active);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="relocate-kernel" tabindex="-1">relocate_kernel <a class="header-anchor" href="#relocate-kernel" aria-label="Permalink to “relocate_kernel”">​</a></h3><div class="language-asm line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* arch/x86/kernel/relocate_kernel_64.S */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SYM_CODE_START_NOALIGN(relocate_kernel)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  movq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	kexec_pa_table_page(%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r9</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  movq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">r9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cr3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 切换到恒等映射页表 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  addq	$identity_mapped - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rsi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subq	$__relocate_kernel_start - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rsi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  jmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	*%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rsi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 得到 identity_mapped 符号的恒等映射地址并跳转 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SYM_CODE_START_LOCAL_NOALIGN(identity_mapped)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	swap_pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SYM_CODE_START_LOCAL_NOALIGN(swap_pages)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 此时 rdi 是 kimage-&gt;head，指向页面 entry 数组。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 下面的代码我就不细讲了，想从 enty 数组得到 source page，把内容拷贝到 swap page，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 再把 destination page 拷贝到 source page，再把 swap page 拷贝到 destination page。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 这样就完成了 source page 和 destination page 的交换。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>IND_INDIRECTION 类型代表这个指向一个页面，页面里才是真正的 entry。</li><li>IND_SOURCE 是在 <code>kimage_load_normal_segment()</code> 里分配的单个页面，包含了新内核等内容。</li><li>IND_DESTINATION 是在 <code>kexec_add_buffer</code> 时，从 iomem_resource 划分的连续内存里的页面。</li></ul><p>XXX 为什么要交换 IND_SOURCE 和 IND_DESTINATION，难道不是把 IND_SOURCE 拷贝到 IND_DESTINATION 就行吗？ 没太看懂，有空再细看。</p><h3 id="purgatory" tabindex="-1">purgatory <a class="header-anchor" href="#purgatory" aria-label="Permalink to “purgatory”">​</a></h3><p>Purgatory 是 Linux kexec 热重启机制中一个至关重要的安全组件。它在旧内核停止运行后、新内核开始执行前的短暂间隙运行，负责确保所有 CPU 处于安全状态、执行最低限度的硬件清理，并（可选但强烈推荐）验证新内核映像在内存中的完整性，防止加载后损坏导致启动失败或系统崩溃。它就像一个尽职的守门人，为新内核的顺利启动扫清障碍并进行最后的安全检查。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/x86_64/arch/x86/purgatory/purgatory.ro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">out/x86_64/arch/x86/purgatory/purgatory.ro:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ELF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64-bit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LSB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> relocatable,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x86-64,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SYSV), not</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readelf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/x86_64/arch/x86/purgatory/purgatory.ro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ELF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Header:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Magic:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   7f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 45</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 46</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 02</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Class:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                             ELF64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Data:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                              2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s complement, little endian</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Version:                           1 (current)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  OS/ABI:                            UNIX - System V</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ABI Version:                       0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Type:                              REL (Relocatable file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Machine:                           Advanced Micro Devices X86-64</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Version:                           0x1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Entry point address:               0x2a0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Start of program headers:          0 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Start of section headers:          19392 (bytes into file)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Flags:                             0x0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size of this header:               64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size of program headers:           0 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Number of program headers:         0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Size of section headers:           64 (bytes)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Number of section headers:         18</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Section header string table index: 16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>purgatory 是一个 bootloader，在特定体系架构上编译 kexec 时，purgatory 会从相应特定体系的源码生成。它是一个 ELF 格式的 relocatable 文件</p><p>编译内核后，可以在一些 .cmd 文件里看到是如何编译出 purgatory.ro、kexec-purgatory.o 等文件的</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">savedcmd_arch/x86/purgatory/purgatory.ro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ld.lld</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elf_x86_64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --compress-debug-sections=zlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> noexecstack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -r</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> purgatory_start</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodefaultlib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/purgatory.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/stack.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/setup-x86_64.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/sha256.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/entry64.o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/string.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch/x86/purgatory/purgatory.ro</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译好的 purgatory.ro 被 .incbin 到 kexec-purgatory.S 里，</p><div class="language-asm line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* arch/x86/purgatory/kexec-purgatory.S */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">section .rodata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, &quot;a&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.align	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kexec_purgatory:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.globl	kexec_purgatory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">incbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&quot;arch/x86/purgatory/purgatory.ro&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lkexec_purgatory_end:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.align	</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kexec_purgatory_size:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.globl	kexec_purgatory_size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.quad	.Lkexec_purgatory_end - kexec_purgatory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>kexec_load_purgatory() 加载 purgatory 并重定位。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_load_purgatory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kimage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kexec_buf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* purgatory 是 elf 格式的，首部就是 elf header */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pi-&gt;ehdr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Elf_Ehdr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)kexec_purgatory;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 遍历 section headers，忽略不会被加载内存里的 SHF_ALLOC，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * SHT_NOBITS 类型的是 bss section，计入 bss_sz，其他的计入 kbuf-&gt;bufsz</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * vzalloc 分配 kbuf-&gt;bufsz 大小的内存。内存地址 pi-&gt;purgatory_buf。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 记录进 kexec_segment 数组内。*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kexec_purgatory_setup_kbuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pi, kbuf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 分配内存，拷贝 section headers（拷贝是因为要进行修改，而只读的不能修改）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 拷贝 section 内容到 pi-&gt;purgatory_buf */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kexec_purgatory_setup_sechdrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pi, kbuf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 修改 .rela.text 等 sections 中的重定位条目 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  kexec_apply_relocations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    arch_kexec_apply_relocations_add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>推荐阅读：<a href="https://csstormq.github.io/blog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%AF%87%E4%B9%8B%E9%93%BE%E6%8E%A5%EF%BC%885%EF%BC%89%EF%BC%9A%E9%87%8D%E5%AE%9A%E4%BD%8D" target="_blank" rel="noreferrer">计算机系统篇之链接（5）：静态链接（下）——重定位</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">❯</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readelf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out/x86_64/arch/x86/purgatory/purgatory.ro</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Relocation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Relocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.rela.text&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x32e8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contains</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 98</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entries:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Relocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.rela__patchable_function_entries&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x3c18</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contains</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entries:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Relocation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.rela.rodata&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x3e48</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contains</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> entries:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="arch-x86-kernel-relocate-kernel-64-s" tabindex="-1">arch/x86/kernel/relocate_kernel_64.S <a class="header-anchor" href="#arch-x86-kernel-relocate-kernel-64-s" aria-label="Permalink to “arch/x86/kernel/relocate_kernel_64.S”">​</a></h3><h3 id="control-page" tabindex="-1">control page <a class="header-anchor" href="#control-page" aria-label="Permalink to “control page”">​</a></h3><p>8KB，第一个 4KB 是页表，第二个 4KB 中的前 2KB 是代码，后 2KB 是栈。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="kexec-on-panic" tabindex="-1">kexec on panic <a class="header-anchor" href="#kexec-on-panic" aria-label="Permalink to “kexec on panic”">​</a></h2><p>crash kernel</p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to “其他”">​</a></h2><ul><li>CONFIG_CRASH_HOTPLUG</li><li><a href="https://docs.kernel.org/next/kho/index.html" target="_blank" rel="noreferrer">Kexec Handover Subsystem — The Linux Kernel documentation</a><a href="https://www.phoronix.com/news/Kexec-HandOver-KHO-Linux-MM" target="_blank" rel="noreferrer">https://www.phoronix.com/news/Kexec-HandOver-KHO-Linux-MM</a><a href="https://www.phoronix.com/news/Google-Live-Update-Orchestrator" target="_blank" rel="noreferrer">https://www.phoronix.com/news/Google-Live-Update-Orchestrator</a><a href="https://lore.kernel.org/lkml/20250320024011.2995837-1-pasha.tatashin@soleen.com/" target="_blank" rel="noreferrer">https://lore.kernel.org/lkml/20250320024011.2995837-1-pasha.tatashin@soleen.com/</a><a href="https://lore.kernel.org/all/20250320015551.2157511-1-changyuanl@google.com/" target="_blank" rel="noreferrer">https://lore.kernel.org/all/20250320015551.2157511-1-changyuanl@google.com/</a> Kexec HandOver（KHO）是一种机制，允许 Linux 在 kexec 过程中保留状态——包括任意属性以及内存位置。 看起来挺牛的， <ul><li><a href="https://lpc.events/event/18/contributions/1732/attachments/1471/3116/lpc24-kexec-acpi_v3.pdf" target="_blank" rel="noreferrer">https://lpc.events/event/18/contributions/1732/attachments/1471/3116/lpc24-kexec-acpi_v3.pdf</a> 字节 STE 团队的工作，</li><li><a href="https://lwn.net/Articles/924933/" target="_blank" rel="noreferrer">https://lwn.net/Articles/924933/</a> Parallel CPU bringup for x86_64</li><li><a href="https://lpc.events/event/17/contributions/1512/" target="_blank" rel="noreferrer">https://lpc.events/event/17/contributions/1512/</a><a href="https://lpc.events/event/17/contributions/1512/attachments/1256/2544/Fast%20Kernel%20Boot.pdf" target="_blank" rel="noreferrer">https://lpc.events/event/17/contributions/1512/attachments/1256/2544/Fast Kernel Boot.pdf</a></li><li><a href="https://kvmforum2022.sched.com/event/15jLX" target="_blank" rel="noreferrer">https://kvmforum2022.sched.com/event/15jLX</a> VF 不停</li></ul></li><li><a href="https://lwn.net/Articles/895453/" target="_blank" rel="noreferrer">Preserving guest memory across kexec [LWN.net]</a></li><li><a href="https://wangcong.org/2025-02-09-persistent-memory-in-linux-kexec.html" target="_blank" rel="noreferrer">https://wangcong.org/2025-02-09-persistent-memory-in-linux-kexec.html</a></li><li><a href="https://github.com/oscomp/proj135-seamless-kernel-upgrade" target="_blank" rel="noreferrer">https://github.com/oscomp/proj135-seamless-kernel-upgrade</a> 没想到字节也想搞双 OS 的热升级 <a href="https://github.com/SmallPond/twinkernel" target="_blank" rel="noreferrer">https://github.com/SmallPond/twinkernel</a></li><li><a href="http://www.popcornlinux.org/" target="_blank" rel="noreferrer">http://www.popcornlinux.org/</a> 看起来贼 nb 啊</li><li><a href="https://github.com/kexecboot/kexecboot/wiki" target="_blank" rel="noreferrer">https://github.com/kexecboot/kexecboot/wiki</a></li><li><a href="https://iliana.fyi/blog/kexec-systemd-boot-kernel-image/" target="_blank" rel="noreferrer">https://iliana.fyi/blog/kexec-systemd-boot-kernel-image/</a></li><li><a href="https://lore.kernel.org/lkml/20220725083904.56552-1-huangjie.albert@bytedance.com/" target="_blank" rel="noreferrer">[PATCH 0/4] faster kexec reboot - Albert Huang</a> 不压缩 image</li><li><a href="https://archive.fosdem.org/2022/schedule/event/security_seamless_kernel/attachments/slides/5061/export/events/attachments/security_seamless_kernel/slides/5061/Seamless_Kernel_Update.pdf" target="_blank" rel="noreferrer">Seamless_Kernel_Update.pdf</a> CRIU checkpoint/restore apps</li><li><a href="https://lwn.net/ml/linux-kernel/20200814055239.47348-1-sangyan@huawei.com/" target="_blank" rel="noreferrer">[PATCH 1/2] kexec: Add quick kexec support for kernel [LWN.net]</a></li></ul><h2 id="学到的一些-没时间总结-先在这里记一下" tabindex="-1">学到的一些，没时间总结，先在这里记一下 <a class="header-anchor" href="#学到的一些-没时间总结-先在这里记一下" aria-label="Permalink to “学到的一些，没时间总结，先在这里记一下”">​</a></h2><ul><li>kexec -l 并不会分配一整块连续的内存，而是申请许多单个 page，将内核和 initrd 拷贝进去，并划分一块大的连续物理内存（不是分配，是划分，这块连续大内存此时是正在被当前 OS 使用着的），在 kexec -e 时，会将内核和 initrd 从许多不连续的单个页面，拷贝到该连续大内存。然后执行该连续大内存里的代码。</li><li>kdump.service 等用户态的 kdump 服务，其原理就是 kexec -p，没做啥特殊的事情，命令行参数里一般会禁用许多特性，比如 iommu 之类。 kexec -p 依赖于内核已经用 crashkernel 预留了一块连续内存（会 memblock_reserve），这个内存可以 grep Crash /proc/iomem 看到。 cat /proc/iomem 看的是内核的 iomem_resource（这是一个树形结构），Crash kernel 对应的是 crashk_res。 当无法从 &lt;4G 分配 crashkernel 时，会用到 crashk_low_res。</li><li>crash 要读原先 OS 的内存，并生成 vmcore，那 crash 是如何确保在启动时不会踩到原先 OS 的内存的？ 答：crash 的 e820 table 是 kexec -p 时定制的。 crash_setup_memmap_entries() 会从 crashk_res 中去除掉 elf header 的部分后，作为 E820_TYPE_RAM。 注意，低 1M 也会被作为 E820_TYPE_RAM。</li></ul>`,46)]))}const E=i(l,[["render",p]]);export{c as __pageData,E as default};
