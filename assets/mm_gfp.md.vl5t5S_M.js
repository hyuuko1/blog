import{_ as i,c as a,o as n,aj as e}from"./chunks/framework.CcbH9oJh.js";const c=JSON.parse('{"title":"GFP (Get Free Page)","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"GFP (Get Free Page) | Blog"}]]},"headers":[],"relativePath":"mm/gfp.md","filePath":"mm/gfp.md","lastUpdated":1761828946000}'),l={name:"mm/gfp.md"};function p(h,s,k,t,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="gfp-get-free-page" tabindex="-1">GFP (Get Free Page) <a class="header-anchor" href="#gfp-get-free-page" aria-label="Permalink to “GFP (Get Free Page)”">​</a></h1><ul><li>🌟 <a href="https://zhuanlan.zhihu.com/p/1921413069709485955" target="_blank" rel="noreferrer">Linux GFP Types</a></li></ul><p>本篇文章讲解伙伴系统分配时的 flags 参数</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_ATOMIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_HIGH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|__GFP_KSWAPD_RECLAIM)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_KERNEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_RECLAIM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_IO | __GFP_FS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_KERNEL_ACCOUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">GFP_KERNEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_ACCOUNT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_NOWAIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_KSWAPD_RECLAIM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_NOWARN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_NOIO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_RECLAIM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_NOFS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_RECLAIM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_IO)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_RECLAIM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_IO | __GFP_FS | __GFP_HARDWALL)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_DMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		__GFP_DMA</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_DMA32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__GFP_DMA32</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_HIGHUSER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">GFP_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_HIGHMEM)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_HIGHUSER_MOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">GFP_HIGHUSER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_MOVABLE | __GFP_SKIP_KASAN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_TRANSHUGE_LIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	((GFP_HIGHUSER_MOVABLE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __GFP_COMP </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			 __GFP_NOMEMALLOC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __GFP_NOWARN) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__GFP_RECLAIM)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_TRANSHUGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">GFP_TRANSHUGE_LIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | __GFP_DIRECT_RECLAIM)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="gfp-zone-table" tabindex="-1"><code>GFP_ZONE_TABLE</code> <a class="header-anchor" href="#gfp-zone-table" aria-label="Permalink to “GFP_ZONE_TABLE”">​</a></h2><h2 id="gfp-atomic" tabindex="-1"><code>GFP_ATOMIC</code> <a class="header-anchor" href="#gfp-atomic" aria-label="Permalink to “GFP_ATOMIC”">​</a></h2><p>分配内存时，不睡眠。</p><h2 id="gfp-nofs" tabindex="-1"><code>GFP_NOFS</code> <a class="header-anchor" href="#gfp-nofs" aria-label="Permalink to “GFP_NOFS”">​</a></h2><ul><li><a href="https://docs.kernel.org/core-api/gfp_mask-from-fs-io.html" target="_blank" rel="noreferrer">GFP masks used from FS/IO context — The Linux Kernel documentation</a></li></ul><p>文件系统和 IO 栈中的代码路径在分配内存时必须小心，以防止递归死锁。 传统的方式是在分配内存时，传 <code>GFP_NOFS</code> 参数，与常用的 <code>GFP_KERNEL</code> 相比，它清除了 <code>__GFP_FS</code>。</p><p><code>__GFP_FS</code> 表明允许调用文件系统的代码。例如，在 <code>super_cache_scan()</code> 里，如果检查到了没有 <code>__GFP_FS</code> flag，则会拒绝继续执行，防止发生死锁。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> super_cache_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shrinker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                      struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shrink_control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * Deadlock avoidance.  We may hold various FS locks, and we don&#39;t want</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * to recurse into the FS that called us in clear_inode() and friends..</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sc-&gt;gfp_mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __GFP_FS))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SHRINK_STOP;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ... 后面可能会加锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>GFP_NOFS</code> 和 <code>GFP_NOIO</code> 有滥用的情况，就引入了这几个 scope API 定义一个作用域，在该作用域内，内存分配操作不会递归回 FS/IO。</p><ul><li><code>memalloc_nofs_save</code></li><li><code>memalloc_nofs_restore</code></li><li><code>memalloc_noio_save</code></li><li><code>memalloc_noio_restore</code></li></ul><p>几个死锁的例子：</p><ul><li><a href="https://lore.kernel.org/all/20200414150233.24495-16-willy@infradead.org/" target="_blank" rel="noreferrer">[PATCH v11 15/25] mm: Use memalloc_nofs_save in readahead path - Matthew Wilcox</a></li><li><a href="https://lore.kernel.org/all/20240426112938.124740-1-wangkefeng.wang@huawei.com/" target="_blank" rel="noreferrer">[PATCH] mm: use memalloc_nofs_save() in page_cache_ra_order() - Kefeng Wang</a></li><li><a href="https://lore.kernel.org/linux-mm/ZRdNK39vc4TuR7g8@casper.infradead.org/" target="_blank" rel="noreferrer">Removal of KM_NOFS - Matthew Wilcox</a></li></ul><p>从分配内存到 <code>super_cache_scan()</code> 的代码路径：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在 memalloc_nofs_save 的作用域分配内存时，调用到 super_cache_scan 时，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   是没有 __GFP_FS 的 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__alloc_pages_noprof-&gt;__alloc_pages_slowpath-&gt;__alloc_pages_direct_reclaim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  try_to_free_pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sc.gfp_mask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> current_gfp_context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gfp_mask),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pflags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(current-&gt;flags);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pflags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PF_MEMALLOC_NOFS)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* memalloc_nofs_save 会设置此 flag */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__GFP_FS;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 移除 __GFP_FS */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    do_try_to_free_pages-&gt;shrink_zones-&gt;shrink_node-&gt;shrink_node_memcgs-&gt;shrink_slab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      do_shrink_slab-&gt;scan_objects:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">super_cache_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="gfp-noio" tabindex="-1"><code>GFP_NOIO</code> <a class="header-anchor" href="#gfp-noio" aria-label="Permalink to “GFP_NOIO”">​</a></h2><p>与 <code>GFP_NOFS</code> 类似</p><h2 id="gfp-movable" tabindex="-1"><code>__GFP_MOVABLE</code> <a class="header-anchor" href="#gfp-movable" aria-label="Permalink to “__GFP_MOVABLE”">​</a></h2><p>函数 <code>gfp_migratetype()</code> 用来把 gfp_flags 转换成迁移类型</p><ul><li>使用标志 <code>__GFP_MOVABLE</code> 指定申请可移动页 <code>MIGRATE_MOVABLE</code></li><li>使用标志 <code>__GFP_RECLAIMABLE</code> 指定申请可回收页 <code>MIGRATE_RECLAIMABLE</code></li><li>如果没有指定这两个标志，表示申请不可移动页 <code>MIGRATE_UNMOVABLE</code></li></ul><p><code>__GFP_MOVABLE</code> 有两个作用</p><ol><li>和 <code>__GFP_HIGHMEM</code> 组合表示从可移动区域分配物理页。</li><li>在根据可移动性分组技术中表示申请迁移类型是可移动类型的物理页 <code>MIGRATE_MOVABLE</code>（尽可能地从这里申请，可能会从其他类型的进行 steal）</li></ol><h2 id="gfp-reclaimable" tabindex="-1"><code>__GFP_RECLAIMABLE</code> <a class="header-anchor" href="#gfp-reclaimable" aria-label="Permalink to “__GFP_RECLAIMABLE”">​</a></h2><p>当使用 <code>__GFP_RECLAIMABLE</code> 标志进行内存分配时，表示：“我分配的页面是可回收的，如果系统内存紧张，可以将其回收。”</p><p>主要用于 slab 分配器中那些指定了 <code>SLAB_RECLAIM_ACCOUNT</code> 的内存分配（比如 sock_inode_cache），表明这些页面可以通过 shrinker 机制被释放。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kvfree_rcu_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kfree_rcu_shrinker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shrinker_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;slab-kvfree-rcu&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kfree_rcu_shrinker-&gt;count_objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kfree_rcu_shrink_count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kfree_rcu_shrinker-&gt;scan_objects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kfree_rcu_shrink_scan;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_shrink_slab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count_objects:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfree_rcu_shrink_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scan_objects:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfree_rcu_shrink_scan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,29)]))}const _=i(l,[["render",p]]);export{c as __pageData,_ as default};
