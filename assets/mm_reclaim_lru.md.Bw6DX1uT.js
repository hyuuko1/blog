import{_ as i,c as a,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const d=JSON.parse('{"title":"内存回收，继续深入 lru","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"内存回收，继续深入 lru | Blog"}]]},"headers":[],"relativePath":"mm/reclaim/lru.md","filePath":"mm/reclaim/lru.md","lastUpdated":1761828946000}'),e={name:"mm/reclaim/lru.md"};function p(t,s,h,r,k,c){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="内存回收-继续深入-lru" tabindex="-1">内存回收，继续深入 lru <a class="header-anchor" href="#内存回收-继续深入-lru" aria-label="Permalink to “内存回收，继续深入 lru”">​</a></h1><h2 id="核心流程-shrink-node" tabindex="-1">核心流程 shrink_node() <a class="header-anchor" href="#核心流程-shrink-node" aria-label="Permalink to “核心流程 shrink_node()”">​</a></h2><p>分析最核心的 <code>shrink_node()</code></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shrink_node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pg_data_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pgdat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scan_control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 初始化 scan_control 中的一些成员，这些成员的作用是平衡active/inactive和文件页/匿名页  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  prepare_scan_control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pgdat, sc);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 核心部分 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  shrink_node_memcgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pgdat, sc);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 忽略掉 memory cgroup，最核心的就是这两个函数，回收 lru 链表上的页面、回收 slab */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    shrink_lruvec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    shrink_slab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  flush_reclaim_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sc);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* TODO 后面的这些暂时忽略 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="anon-file-和-inactive-active-平衡" tabindex="-1">anon/file 和 inactive/active 平衡 <a class="header-anchor" href="#anon-file-和-inactive-active-平衡" aria-label="Permalink to “anon/file 和 inactive/active 平衡”">​</a></h3><p>不同的内存回收触发路径会使得 scan_control 中的成员不一样，</p><p>prepare_scan_control() 也会调整 scan_control，如果满足以下条件之一，就设置 sc-&gt;may_deactivate，影响到 shrink_list() 时是否进行 shrink_active_list() 对 active anon/file 进行 deactivate。</p><ul><li>inactive anon/file 数量偏少。见 <code>inactive_is_low()</code></li><li>从上次回收结束后到现在，这段时间内，发生了 anon/file refault 时的 active。详见 170b04b7ae49</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scan_control</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> may_deactivate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果此次未完成回收目标，并且此次回收时，跳过了 shrink 某个 active list，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           就会 force_deactivate = 1，然后 retry 重试一次，这一次要强制 shrink 所有的 active list */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> force_deactivate:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> may_swap:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache_trim_mode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file_is_tiny:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 越小，这次循环扫描的越多 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	s8 priority;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>scan_control 和 vm.swappiness 最终会影响 shrink_lruvec()-&gt;get_scan_count() 里计算要在 4 个 lru 链表上分别扫描的数量。 get_scan_count() 先选择 enum scan_balance，再计算出具体的数量。</p><ul><li>均衡</li><li>只扫描 file</li><li>只扫描 aono</li><li>由 sc-&gt;anon_cost, sc-&gt;file_cost, swappiness 决定</li></ul><p>注意：</p><ul><li>在 mglru 中不会用到 get_scan_count()，而且对于 swappiness，只关心其是否为 0</li><li>swappiness 的上限在某次 commit 变成了 200 <ul><li>c843966c556d 2020-06-03 mm: allow swappiness that prefers reclaiming anon over the file workingset <a href="https://lore.kernel.org/linux-mm/20200520232525.798933-4-hannes@cmpxchg.org/" target="_blank" rel="noreferrer">https://lore.kernel.org/linux-mm/20200520232525.798933-4-hannes@cmpxchg.org/</a></li></ul></li></ul><hr><p>深入 prepare_scan_control() 细节，</p><p>inactive_is_low()</p><h3 id="shrink-lruvec" tabindex="-1"><code>shrink_lruvec()</code> <a class="header-anchor" href="#shrink-lruvec" aria-label="Permalink to “shrink_lruvec()”">​</a></h3><p>暂时忽略 MGLRU 和 memory cgroup</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 扫描并回收 lru 4 个链表上的页面 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shrink_lruvec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 4 种 lru 类型的页面，我们接下来分别要扫描的数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     扫描数量与 sc-&gt;priority 有关。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     TODO 将来再详细分析 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr[NR_LRU_LISTS];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> targets[NR_LRU_LISTS];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get_scan_count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lruvec, sc, nr);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  memcpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(targets, nr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nr));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 除了 LRU_ACTIVE_ANON 以外，其余 lru list 都需要扫描完 nr[LRU_xxx] 个 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nr[LRU_INACTIVE_ANON] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr[LRU_ACTIVE_FILE] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr[LRU_INACTIVE_FILE])</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    for_each_evictable_lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lru)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nr_to_scan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nr[lru], SWAP_CLUSTER_MAX);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 每次循环最多扫描 32 个 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nr[lru] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr_to_scan;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 扫描并回收。并返回成功回收的数量 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nr_reclaimed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shrink_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lru, nr_to_scan, lruvec, sc);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* TODO 这里还会调整 nr[]，暂时略过。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         哪些情况不会调整 nr[]：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           如果成功回收的页面数量少于目标数量（在内存规整时，目标数量就是 1&lt;&lt;order）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           或者是在 direct reclaim 场景 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 扫描结束，记录回收的页面数量 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sc-&gt;nr_reclaimed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr_reclaimed;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果可以老化匿名页，并且 inactive anon 很少，则将一部分 active 老化为 inactive */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (...) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shrink_active_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LRU_ACTIVE_ANON)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 回收某个 lru list 上的页面。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   - active 会先老化为 inactive。而 inactive 会直接回收。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   - for_each_evictable_lru() 是先 shrink_list(inactive)，让 inactive 变少，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     再 shrink_list(active) 补充 inactive。为什么这么设计？ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shrink_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 对于 active，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     - 如果允许回收 active file/anon，则将该 active file/anon 老化为 inactive。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     - 否则就跳过，并 sc-&gt;skipped_deactivate = 1 记录下此次跳过。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       后续：如果发现此次未完成回收目标，并发现此次跳过了回收 active，就会强制回收 active */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_active_lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lru)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sc-&gt;may_deactivate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_file_lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lru)))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      shrink_active_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sc-&gt;skipped_deactivate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 对于 inactive，进行回收 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  shrink_inactive_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nr_to_scan, lruvec, sc, lru)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p><strong>shrink_inactive_list(): 回收 inactive anon/file lru</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shrink_inactive_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 扫描 nr_to_scan 个页面，并从 inactive lru 移除，移动到 folio_list 上。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     返回的 nr_takenn 是 folio_list 上的 page 数量 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  LIST_HEAD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio_list);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lru_add_drain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* XXX: 为什么不是 lru_add_drain_all() */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  spin_lock_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lruvec-&gt;lru_lock);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 扫描 inac */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nr_taken </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isolate_lru_folios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nr_to_scan, lruvec, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio_list, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nr_scanned, sc, lru);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  spin_unlock_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lruvec-&gt;lru_lock);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 回收 folio */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  shrink_folio_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio_list, pgdat, sc, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stat, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lruvec_memcg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lruvec));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 将未完成回收的 folio 放回 lru */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  spin_lock_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lruvec-&gt;lru_lock);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  move_folios_to_lru</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lruvec, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio_list);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lru_note_cost_unlock_irq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 回收 inactive folio */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shrink_folio_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio_list))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 从链表头摘下一个 folio。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    - 进行 lock。因为之前我们是持锁 isolate_lru_folios() 的，因此不可能存在并发回收同一个 folio，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      那可能就是有其他路径在操作这个 folio 了，这种情况下跳过该 folio。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    - 如果是 unevictable 或者是 mlock 锁住不允许回收的，跳过，并可能移动到 active。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    - 如果不允许回收已经被映射到用户空间的页面，跳过。在快速回收场景，这取决于 /proc/sys/vm/zone_reclaim_mode */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    list_del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio-&gt;lru);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_trylock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_evictable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio))) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep_locked;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sc-&gt;may_unmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_mapped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keep_locked;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><hr><p><strong>shrink_active_list(): 将 active anon/file 老化为 inactive anon/file</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="folio-的-activation-和-deactivation" tabindex="-1">folio 的 activation 和 deactivation <a class="header-anchor" href="#folio-的-activation-和-deactivation" aria-label="Permalink to “folio 的 activation 和 deactivation”">​</a></h2><ol><li>位于 buddy system 中的空闲页面、内核自身使用（不映射给用户进程）的页面，不在任何 lru 链表里。</li><li>从 buddy 分配内存后，<code>__ClearPageBuddy()</code> 清除 PG_buddy flag。如果是为了用户而分配的页面，就会 folio_add_lru() 放入 per-cpu 的 cpu_fbatches.lru_add 里</li><li>当 folio_batch 满了，或者 <code>lru_add_drain_cpu()</code> 时，会把页面放进 memcg 粒度的 lruvec 链表里。因为没有 PG_active，所以放进的是 LRU_ACTIVE_ANON 或 LRU_ACTIVE_FILE 链表。</li><li>对于文件页 <ol><li>在 filemap_read() 过程中，都会对 pagecache 文件页进行 folio_mark_accessed()，第一次会设置 PG_referenced，第二次会清除 PG_referenced 但是设置上 PG_active，第三次会设置上 PG_referenced</li><li>在 filemap_fault() 和 write_begin_get_folio() 时，因为在调用 <code>__filemap_get_folio()</code> 时没有设置 FGP_ACCESSED fgp_flags，所以不会 folio_mark_accessed()</li></ol></li><li>对于匿名页，会在 shrink_folio_list() 扫描 inactive lru list 时，检查所有映射了该 folio 的 pte 的 Access bit，如果存在，则 folio_set_active() 置上 PG_active。</li><li>在 shrink_active_list() 时，会把一些 active lru list 里的 folio 移动到 inactive folio list</li><li>疑问一：为什么匿名页不和文件页那样，在 pagefault 时就进行 active？ 疑问二：为什么在 write 文件页 pagecache 时，不 folio_mark_accessed()，但是 read 时就会 folio_mark_accessed()？</li></ol><p><a href="https://aistudio.google.com/app/prompts/1c_JBS1h970ftyTrpnlCUcsmaSGwkQh_P" target="_blank" rel="noreferrer">https://aistudio.google.com/app/prompts/1c_JBS1h970ftyTrpnlCUcsmaSGwkQh_P</a></p><p><a href="https://aistudio.google.com/app/prompts/1zHousmm7Bwx0tn1Yarhycsq-3qgaBmRQ" target="_blank" rel="noreferrer">https://aistudio.google.com/app/prompts/1zHousmm7Bwx0tn1Yarhycsq-3qgaBmRQ</a></p><p>总结：</p><ul><li>文件页的 activation <ul><li>folio_mark_accessed() <ul><li>filemap_read() 时</li><li><code>zap_p4d_range()-&gt;...-&gt;zap_present_folio_ptes()</code> 在 zap file folio 的 pte 时，如果发现 pte 上有 Access bit，就 folio_mark_accessed() <ul><li>常见于 sys_execve/sys_exit 进行 <code>__mmput()</code> 时、sys_munmap 时</li></ul></li><li>gup 时，如果指定了 FOLL_TOUCH，就会 <code>follow_page_pte()-&gt;folio_mark_accessed()</code></li><li>其他不常见的场景。<code>sudo bpftrace -e &#39;fentry:vmlinux:folio_mark_accessed { @[kstack] = count(); }&#39;</code></li></ul></li><li>workingset_refault()-&gt;folio_set_active() 当 refault_distance &lt;= workingset_size 时。</li><li>shrink_folio_list()-&gt;folio_set_active() 当</li></ul></li></ul><h2 id="对-kswapd-回写脏页的优化" tabindex="-1">对 kswapd 回写脏页的优化 <a class="header-anchor" href="#对-kswapd-回写脏页的优化" aria-label="Permalink to “对 kswapd 回写脏页的优化”">​</a></h2><p>2017-02-02 <a href="https://lore.kernel.org/linux-mm/20170202191957.22872-1-hannes@cmpxchg.org/" target="_blank" rel="noreferrer">[PATCH 0/7] mm: vmscan: fix kswapd writeback regression v2 - Johannes Weiner</a><a href="https://aistudio.google.com/app/prompts/1u5cddXAGbhjM1e8FWQSzpb8P-Nd3br_1" target="_blank" rel="noreferrer">https://aistudio.google.com/app/prompts/1u5cddXAGbhjM1e8FWQSzpb8P-Nd3br_1</a></p><h2 id="folio-在链表之间的流转" tabindex="-1">folio 在链表之间的流转 <a class="header-anchor" href="#folio-在链表之间的流转" aria-label="Permalink to “folio 在链表之间的流转”">​</a></h2><p>注意：lru_to_folio() 获取的是链表尾部的 folio！</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> shrink_active_list 时，</li></ul><p>shrink_inactive_list() 时</p><ol><li>lru 链表的头部是较新的 folio，尾部是较老的 folio。</li><li>shrink_inactive_list()-&gt;isolate_lru_folios() 从 inactive 链表取下 folio 放入 folio_list 链表，该链表里的头部是较新的 folio，尾部是较老的 folio。</li><li>shrink_inactive_list()-&gt;shrink_folio_list()，从尾到头遍历 folio_list 链表，也就是先遍历老的 folio，这个 folio 被取下后有 3 种结果： <ol><li>goto keep_locked; 最终被放回 folio_list 链表，此时该链表的头部是较新的，尾部是较老的。最终在 move_folios_to_lru() 里从老到新放进 lru 链表。</li><li>goto activate_locked; 最终被放到 active lru list 内。</li><li>被回收。</li></ol></li></ol><h2 id="shrink-folio-list-中-anon-filio-的回收流程" tabindex="-1">shrink_folio_list() 中，anon filio 的回收流程 <a class="header-anchor" href="#shrink-folio-list-中-anon-filio-的回收流程" aria-label="Permalink to “shrink_folio_list() 中，anon filio 的回收流程”">​</a></h2><ol><li>加入 swapcache。folio_alloc_swap(folio)</li><li>folio_mark_dirty(folio);</li><li>pageout()-&gt;writeout()-&gt;swap_writeout() 涉及到同步或异步。同步或异步完成都会 folio_end_writeback()-&gt;folio_xor_flags_has_waiters() 清除 PG_writeback</li><li>如果是同步，那么返回 PAGE_SUCCESS 并且 folio_test_writeback() goto keep，放回 lru</li><li>如果是异步，等到回写完成后，在将来再次 shrink_folio_list() 时，才会和同步时一样最终走到 <code>__remove_mapping()-&gt;__delete_from_swap_cache()</code> 从 swapcache 移除</li></ol><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h2><p>Linux 内核中，既然被 gup 操作 pin 过的 folio 是不可以被回收的，为什么不将其标记为 PG_unevictable？ 这样一来，不是可以防止该 folio 在 shrink_folio_list() 里做各种包括 folio_check_references() 在内的开销很大的检查吗？</p><p>我看在页面迁移时，move_to_new_folio() 里检查了必须要保证 folio 是 locked 的，然后后面才会 folio_expected_ref_count() 检查。 难道这就是原因？应该不是，因为 shrink_folio_list() 里也会 folio_trylock()</p><p>要 后，其 refcount/mapcount 才会稳定？才能进行检查？ 因为检查要同时看 refcount 和 mapcount，存在原子性问题？假阳性？ 不过， <a href="https://lore.kernel.org/all/20230428124140.30166-1-jack@suse.cz/" target="_blank" rel="noreferrer">https://lore.kernel.org/all/20230428124140.30166-1-jack@suse.cz/</a></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to “其他”">​</a></h2><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to “”">​</a></h2>`,45)]))}const g=i(e,[["render",p]]);export{d as __pageData,g as default};
