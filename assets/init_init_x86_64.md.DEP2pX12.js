import{_ as a,c as i,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const E=JSON.parse('{"title":"Linux 内核初始化","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Linux 内核初始化 | Blog"}]]},"headers":[],"relativePath":"init/init_x86_64.md","filePath":"init/init_x86_64.md","lastUpdated":1761828946000}'),e={name:"init/init_x86_64.md"};function p(t,s,r,h,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="linux-内核初始化" tabindex="-1">Linux 内核初始化 <a class="header-anchor" href="#linux-内核初始化" aria-label="Permalink to “Linux 内核初始化”">​</a></h1><ul><li>🌟 <a href="https://0xax.gitbook.io/linux-insides/summary/booting" target="_blank" rel="noreferrer">Booting | linux-insides</a><ul><li><a href="https://docs.hust.openatom.club/linux-insides-zh/booting" target="_blank" rel="noreferrer">引导 | linux-insides-zh</a></li></ul></li><li>Linux 内核源代码情景分析，第 10 章</li></ul><h2 id="setup-bin、进入-vmlinux-bin-之前、实模式" tabindex="-1">setup.bin、进入 vmlinux.bin 之前、实模式 <a class="header-anchor" href="#setup-bin、进入-vmlinux-bin-之前、实模式" aria-label="Permalink to “setup.bin、进入 vmlinux.bin 之前、实模式”">​</a></h2><p><a href="https://en.wikipedia.org/wiki/Reset_vector" target="_blank" rel="noreferrer">Reset vector - Wikipedia</a></p><p>0xfffffff0</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* arch/x86/boot/main.c 被编译进 setup.elf 了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   此时在实模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  detect_memory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    detect_memory_e820</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ireg.ax  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">e820</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      intcall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ireg, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oreg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      boot_params.e820_entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    detect_memory_e801</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    detect_memory_88</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="进入-vmlinux-bin、保护模式" tabindex="-1">进入 vmlinux.bin、保护模式 <a class="header-anchor" href="#进入-vmlinux-bin、保护模式" aria-label="Permalink to “进入 vmlinux.bin、保护模式”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* arch/x86/kernel/head_64.S */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startup_64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  startup_64_setup_gdt_idt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  __startup_64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  common_startup_64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    early_setup_idt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    initial_code 也即 x86_64_start_kernel</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x86_64_start_reservations-&gt;start_kernel</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 启动其他 cpu */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">do_boot_cpu</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (apic-&gt;wakeup_secondary_cpu_64)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 关键 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start_ip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> real_mode_header-&gt;trampoline_start64;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  initial_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)start_secondary;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trampoline_start64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tr_start 其实就是下面设置的 trampoline_header-&gt;start 也就是 secondary_startup_64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 来看一下 trampoline_header-&gt;start 是怎么设置的 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* do_init_real_mode 用 early_initcall 宏声明过 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">do_init_real_mode-&gt;init_real_mode-&gt;setup_real_mode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* trampoline_header 这个指针，是在 arch/x86/realmode/rm/header.S 里定义为 trampoline_header 的，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    这里直接就修改了下面的 .space 8 这块区域</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  trampoline_header-&gt;start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (u64) secondary_startup_64;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* arch/x86/realmode/rm/trampoline_64.S</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   这里定义了 tr_start 变量 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SYM_DATA_START</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trampoline_header)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SYM_DATA_LOCAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tr_start,	.space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SYM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tr_efer,		.space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SYM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tr_cr4,		.space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SYM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tr_flags,		.space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	SYM_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tr_lock,		.space </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SYM_DATA_END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trampoline_header)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="config-pvh-不用-bzimage-直接用-vmlinux-是啥情况" tabindex="-1">[ ] CONFIG_PVH，不用 bzImage 直接用 vmlinux 是啥情况 <a class="header-anchor" href="#config-pvh-不用-bzimage-直接用-vmlinux-是啥情况" aria-label="Permalink to “[ ] CONFIG_PVH，不用 bzImage 直接用 vmlinux 是啥情况”">​</a></h2><p>使用 CONFIG_PVH 时，PVH 相关代码被编译进 vmlinux 了。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h2><p>TODO boot_params.hdr.setup_data 会呈现给用户空间，/sys/kernel/debug/x86/boot_params/setup_data create_setup_data_nodes</p>`,12)]))}const b=a(e,[["render",p]]);export{E as __pageData,b as default};
