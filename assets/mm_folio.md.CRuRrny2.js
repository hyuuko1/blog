import{_ as a,c as i,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const c=JSON.parse('{"title":"struct page/folio 详解","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"struct page/folio 详解 | Blog"}]]},"headers":[],"relativePath":"mm/folio.md","filePath":"mm/folio.md","lastUpdated":1761828946000}'),e={name:"mm/folio.md"};function p(t,s,h,r,k,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="struct-page-folio-详解" tabindex="-1">struct page/folio 详解 <a class="header-anchor" href="#struct-page-folio-详解" aria-label="Permalink to “struct page/folio 详解”">​</a></h1><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><p>按照顺序把下列文章看完，本文就不用看了。</p><ul><li><a href="https://lwn.net/Kernel/Index/#Memory_management-Folios" target="_blank" rel="noreferrer">https://lwn.net/Kernel/Index/#Memory_management-Folios</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/131485936" target="_blank" rel="noreferrer">论好名字的重要性： Linux 内核 page 到 folio 的变迁 - OPPO 内核工匠</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/137983188" target="_blank" rel="noreferrer">Linux Large Folios 大页在社区和产品的现状和未来 - OPPO 内核工匠</a><ul><li>large folio 带来的改进</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/1902473318315058208" target="_blank" rel="noreferrer">page 到 folio 的变迁 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/1893129934966334162" target="_blank" rel="noreferrer">Linux Compound Page - 知乎</a><ul><li>Compound page 在文件页中为什么没有大量应用</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/1899608337592587983" target="_blank" rel="noreferrer">Linux folios - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/654873809" target="_blank" rel="noreferrer">Linux 内存管理新特性 - Memory folios 解读 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/1893423269048217950" target="_blank" rel="noreferrer">代码段使用 large folio（LSFMM&amp;BPF 2025） - 知乎</a></li><li><a href="https://www.infradead.org/~willy/linux/2022-06_LCNA_Folios.pdf" target="_blank" rel="noreferrer">https://www.infradead.org/~willy/linux/2022-06_LCNA_Folios.pdf</a></li><li><a href="https://lore.kernel.org/linux-mm/20220104001046.12263-1-vbabka@suse.cz/" target="_blank" rel="noreferrer">https://lore.kernel.org/linux-mm/20220104001046.12263-1-vbabka@suse.cz/</a></li><li><a href="https://lore.kernel.org/all/20210712190204.80979-1-willy@infradead.org/" target="_blank" rel="noreferrer">https://lore.kernel.org/all/20210712190204.80979-1-willy@infradead.org/</a></li><li><a href="https://lore.kernel.org/lkml/20250514201729.48420-1-ryncsn@gmail.com/" target="_blank" rel="noreferrer">[PATCH 00/28] mm, swap: introduce swap table - Kairui Song</a></li></ul><p>mTHP 相关：</p><ul><li><a href="./mthp">mthp</a></li></ul><p>后续路线</p><ul><li><a href="https://kernelnewbies.org/MatthewWilcox/Memdescs/Path" target="_blank" rel="noreferrer">MatthewWilcox/Memdescs/Path - Linux Kernel Newbies</a></li><li><a href="https://kernelnewbies.org/MatthewWilcox/BuddyAllocator" target="_blank" rel="noreferrer">MatthewWilcox/BuddyAllocator - Linux Kernel Newbies</a><ul><li><a href="https://lore.kernel.org/linux-mm/20240229183436.4110845-2-yuzhao@google.com/" target="_blank" rel="noreferrer">[Chapter One] THP zones: the use cases of policy zones - Yu Zhao</a></li></ul></li></ul><p>这些文章介绍的已经很详尽了，我只做一些总结。</p><h2 id="要解决什么问题" tabindex="-1">要解决什么问题？ <a class="header-anchor" href="#要解决什么问题" aria-label="Permalink to “要解决什么问题？”">​</a></h2><p>先直接说结论：<strong>folio 必然不可能是一个 tail page</strong>，而是一个集体概念（单个也算集体），避免了语义混乱。带来了以下好处：</p><ul><li>降低 compound_head 冗余的调用导致的性能衰退</li><li>folio 无论是否为 compound page 均为 head page，修复可能出现的误将 tail page 当作 head page 来使用导致的 bug</li><li>更容易实现 page cache 文件页 larg folio，提升性能</li><li>匿名页 pagefault 更容易实现 mTHP，减少 cache miss 和 pagefault 次数。</li><li>arm64 更容易实现 cont pte</li><li>提升 swap-out swap-in 性能</li><li>潜在的以更大粒度在 zRAM/zsmalloc 进行压缩/解压的机会，从而降低压缩/解压的 CPU 利用率、提高压缩率。比如 64KiB 的 large folio 整体压缩，比分成 16 个 4KiB 的 small folio 来进行压缩，有明显优势。</li><li>随着 struct page 成员不断地剥离，未来可能不再需要 64 字节，folio、ptdesc、slab 这些结构体转为动态分配</li><li>降低 LRU 的规模和内存 reclamation 的成本，以 large folio 为单位进行回收，整个 large folio 在 folio_referenced() 等的反向映射成本低于多个 small folio 单独进行 rmap 的成本；try_to_unmap_one() 理论上也如此。</li></ul><p><strong>先理解 compound page 是什么？满足以下条件的连续页，PageCompound() 返回 true，order&gt;0</strong></p><ul><li>首页 head page 有 PG_head 标记 <code>page-&gt;flags |= (1UL &lt;&lt; PG_head);</code></li><li>其他的页 tail page 的 compound_head 上的最后一位设置 1 <code>page-&gt;compound_head |= 1UL;</code>，compound_head-1 指向真正的 head page。</li></ul><p>head page 和 tail page 都被称为 compound page。</p><p>5.10 版本的 API：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 判断是否是 compound page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __always_inline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageCompound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(struct page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* head page 或 tail page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PG_head, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page-&gt;flags) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageTail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 判断是否是 head page of compound（其实是个宏，这里我改成函数了） */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __always_inline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> struct page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PG_head, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page-&gt;flags);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 判断是否是 tail page of compound */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __always_inline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageTail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(struct page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page-&gt;compound_head) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 传入 head page，从 page[1] 得到复合页大小 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compound_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PageHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compound_order;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 得到 head page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compound_head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page-&gt;compound_head);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 如果是 tail page，那 compound_head-1 就是 head page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (head </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prep_compound_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>Linux 内核中，有使用 compound page 的地方：</p><ol><li>一些驱动通过 <code>__GFP_COMP</code> 申请 order&gt;0 的连续页，比如 <code>alloc_skb_with_frags()</code></li><li>透明大页（THP）和 HugeTLB 大页。</li></ol><p>HugeTLB 和 THP 场景不可能是只有 2 页，它们存在 2MB/4KB，所以一定存在 page[2]。</p><p>通过 page[0]~page[n-1] 中 flags、compound_head、compound_dtor 成员的特殊串联关系，把这 N 个 page 结构体联系在了一起。这产生了一个混乱，很多时候，我们真正想操作的，其实只是 compound page 的<strong>整体</strong>，比如 get_page()、put_page()、lock_page()、unlock_page() 等。于是这样的 API 里面，广泛地存在这样的 <code>compound_head()</code> 操作用于获取 head page。</p><p>就以 get_page() 为例，传入 get_page() 的 page 结构体，其实可能是三种情况：</p><ol><li>就是一个普通的非 compound page 的 4KB page，这个时候，<code>compound_head()</code> API 实际还是返回那个 page；</li><li>传入的是一个 compound page 的 page[0]（也即 head page），这个时候，<code>compound_head()</code> 返回的还是 page[0]；</li><li>传入的是 compound page 的 page[1]~page[n]（也即 tail page），这个时候，<code>compound_head()</code> 返回的是 compound_head-1，也就是 page[0]。</li></ol><h2 id="如何解决问题的" tabindex="-1">如何解决问题的？ <a class="header-anchor" href="#如何解决问题的" aria-label="Permalink to “如何解决问题的？”">​</a></h2><p>struct folio 表达一块连续的大小为 2^order (order&gt;=0) 的物理页面。</p><ul><li>order=0 时，表达一个“独立”的页面，称之为 small folio</li><li>order&gt;0 时，表达复合页，称之为 large folio</li><li>无法表达复合页内的 tail page，此时仍需 struct page 来表达。</li></ul><p>也就是说，<strong>folio 必然不可能是一个 tail page</strong>，而是一个集体概念（单个也算集体），避免了语义混乱，这就是 folio 的核心所在，可以省去 <code>compound_head()</code></p><p>Linux 中使用页面集合的例子：</p><ol><li>加入 lruvec 的页面集合。</li><li>refcount 计数、进行 lock</li><li>mem_cgroup 等的记账 charge</li><li>wait writeback、bit</li><li>address_space 绑定的 Page cache 的查找、插入、删除等操作应该是一个集合，因为 page cache 也是可以是 THP 的。</li><li>rmap 相关的单元应该是一个集合。</li></ol><p>本质上 folio 和 page 数据结构在内存意义上相等，所以基于历史原因短期内难以改掉的代码，使用的仍然是 page。 为了方便，把一些 page 里面常用字段，放在了 folio 里的相同位置。</p><p>folio_page(folio, n)这个 API 可以取出一个 folio 中的第 n 个 page。</p><p>目前 6.16 对 <code>struct page</code> 进行拆分出了 6 个结构体，不仅仅是 folio，还有 slab 等等。</p><ul><li><code>struct folio</code> 复合页</li><li><code>struct slab</code></li><li><code>struct ptdesc</code> 页表</li><li><code>struct zpdesc</code> 用于 zswap mm/zpdesc.h</li><li><code>struct ioptdesc</code> 用于 iommu drivers/iommu/iommu-pages.h</li><li><code>struct net_iov</code> 把 sk_buff 的 head 指向的 folio 转为 netmem_ref 的过程：skb_head_frag_to_page_desc()-&gt;skb_frag_fill_page_desc()-&gt;page_to_netmem()。 再转为 net_iov：netmem_to_net_iov()</li></ul><p>其他差异</p><ul><li>原先的 page_mapped() 需遍历复合页内每个 page，如今用 folio 描述整个复合页，从 <code>_mapcount</code> 可以明确整个复合页的状态。</li></ul><h2 id="folio" tabindex="-1">folio <a class="header-anchor" href="#folio" aria-label="Permalink to “folio”">​</a></h2><h2 id="后续路线" tabindex="-1">后续路线 <a class="header-anchor" href="#后续路线" aria-label="Permalink to “后续路线”">​</a></h2><p>让 struct page 只有 8byte 指向通过 slab 来动态分配 folio、ptdesc、slab 的，这样更省内存。 毕竟 2MB 大页实际上只需要 3 个 struct page。</p><h2 id="struct-page" tabindex="-1">struct page <a class="header-anchor" href="#struct-page" aria-label="Permalink to “struct page”">​</a></h2><ul class="contains-task-list"><li><em>The Linux Memory Manager</em> 2.1 struct page</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 对比 5.10 和 6.16 版本的，分析 page 剩余的字段。</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* Page cache and anonymous pages */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list_head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lru;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				/* Or, for the Unevictable &quot;LRU list&quot; slot */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					/* Always even, to negate PageTail */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">					void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">__filler;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">					/* Count page&#39;s or folio&#39;s mlocks */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">					unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mlock_count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				/* Or, free page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list_head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buddy_list;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> list_head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pcp_list;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			/* See page-flags.h for PAGE_MAPPING_FLAGS */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> address_space</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mapping;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				pgoff_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* Our offset within mapping. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> share;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* share count for fsdax */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> private;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rcu_head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rcu_head;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 如果是 folio 的 head page（如果是空闲的，那也可以说是buddy块的首页？）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		高 8 位是 enum pagetype</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		可以用 PageBuddy 这种函数去判断类型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_type;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/*  */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		atomic_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _mapcount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	atomic_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _refcount;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p><code>mapping</code> 字段的低 2 位，即与 <code>PAGE_MAPPING_FLAGS</code> 相与，表示 4 种类型。分别是：</p><ul><li>0 代表 <code>struct address_space</code></li><li>FOLIO_MAPPING_ANON <code>struct anon_vma</code></li><li>FOLIO_MAPPING_ANON_KSM 不存在这种情况？</li><li>FOLIO_MAPPING_KSM <code>struct ksm_stable_node</code> folio_set_stable_node()</li></ul><h2 id="struct-ptdesc" tabindex="-1">struct ptdesc <a class="header-anchor" href="#struct-ptdesc" aria-label="Permalink to “struct ptdesc”">​</a></h2><ul><li>pmd_huge_pte 预先分配的一个 pte page table</li><li>ptl 用于 PTE 页表锁</li></ul><h2 id="struct-slab" tabindex="-1">struct slab <a class="header-anchor" href="#struct-slab" aria-label="Permalink to “struct slab”">​</a></h2><h2 id="struct-folio" tabindex="-1">struct folio <a class="header-anchor" href="#struct-folio" aria-label="Permalink to “struct folio”">​</a></h2><ul><li>mapping 字段 <ul><li>如果是文件页。指向一个 <code>struct address_space</code>，表明所属的文件</li><li>如果是匿名页。指向一个 <code>struct anon_vma</code></li></ul></li><li>index 字段 <ul><li>如果是文件页。这个就是文件内的偏移量，pgoff，单位为 4KB。</li><li>如果是匿名共享页。这个就是相对于 vma-&gt;vm_start 的偏移量</li><li>如果是匿名私有页。这个就是虚拟页面号</li></ul></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio_mapping</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>deferred_list</code> 被 thp 使用，</li></ul><h2 id="pageflags" tabindex="-1">pageflags <a class="header-anchor" href="#pageflags" aria-label="Permalink to “pageflags”">​</a></h2><p><a href="./pageflags">pageflags</a></p><h2 id="refcount-和-mapcount" tabindex="-1">refcount 和 mapcount <a class="header-anchor" href="#refcount-和-mapcount" aria-label="Permalink to “refcount 和 mapcount”">​</a></h2><ul><li><a href="https://blog.csdn.net/GetNextWindow/article/details/131905827" target="_blank" rel="noreferrer">page _refcount 和_mapcount 字段</a></li></ul><h2 id="pagetype" tabindex="-1">pagetype <a class="header-anchor" href="#pagetype" aria-label="Permalink to “pagetype”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* 这两个占同一个位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		如果高 8bit 在 0xf0-0xfe 范围内，就作为 pagetype 使用；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		否则+1作为 mapcount 使用，详见 folio_mapcount() */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_type;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		atomic_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _mapcount;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* large folio 用 _large_mapcount 作为 mapcount */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pagetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 0x00-0x7f are positive numbers, ie mapcount */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* Reserve 0x80-0xef for mapcount overflow. */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_buddy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_offline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_guard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_hugetlb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_slab</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_zsmalloc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_unaccepted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_large_kmalloc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">f8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	PGTY_mapcount_underflow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page_type_has_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> page_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 注意！(PGTY_mapcount_underflow &lt;&lt; 24) 实际上是一个负数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	因此，如果 page_type 的高 8bit 在 0xf0-0xfe 范围内，则返回 true，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	如果在 0x00-0x7f 范围内，这返回 false，说明是正常的 mapcount，不是 pagetype */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (PGTY_mapcount_underflow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><ul><li>PageBuddy()</li><li>PageOffline()</li><li>PageTable()</li><li>PageGuard()</li><li>PageHuge()</li><li>PageSlab()</li><li>PageZsmalloc()</li><li>PageUnaccepted()</li></ul><p>folio 版本为：</p><ul><li>folio_test_buddy()</li><li>folio_test_offline()</li><li>folio_test_table()</li><li>folio_test_guard()</li><li>folio_test_hugetlb()</li><li>folio_test_slab()</li><li>folio_test_zsmalloc()</li><li>folio_test_unaccepted()</li><li>folio_test_large_kmalloc()</li></ul><p>一个规律，在 struct page 的变体里，比如 ptdesc，如果成员名 <code>__xxx</code>，大概意味着该成员未被该变体使用。</p><h2 id="待重点分析的函数" tabindex="-1">待重点分析的函数 <a class="header-anchor" href="#待重点分析的函数" aria-label="Permalink to “待重点分析的函数”">​</a></h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> folio_referenced()</li></ul>`,62)]))}const o=a(e,[["render",p]]);export{c as __pageData,o as default};
