import{_ as i,c as s,o as e,aj as l}from"./chunks/framework.CcbH9oJh.js";const d=JSON.parse('{"title":"Memory Reclaim","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Memory Reclaim | Blog"}]]},"headers":[],"relativePath":"mm/reclaim/reclaim.md","filePath":"mm/reclaim/reclaim.md","lastUpdated":1761828946000}'),n={name:"mm/reclaim/reclaim.md"};function r(t,a,p,h,c,o){return e(),s("div",null,a[0]||(a[0]=[l(`<h1 id="memory-reclaim" tabindex="-1">Memory Reclaim <a class="header-anchor" href="#memory-reclaim" aria-label="Permalink to “Memory Reclaim”">​</a></h1><p>按顺序来看</p><hr><p>介绍</p><ul><li><a href="https://zhuanlan.zhihu.com/p/73539328" target="_blank" rel="noreferrer">Linux 内存调节之 zone watermark - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/70964195" target="_blank" rel="noreferrer">Linux 中的内存回收 [一] - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/72998605" target="_blank" rel="noreferrer">Linux 中的内存回收 [二] - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/93962657" target="_blank" rel="noreferrer">Linux 内存回收之 drop cache - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/499738178" target="_blank" rel="noreferrer">Linux - 再议内存回收之 swappiness - 知乎</a></li></ul><hr><ul><li><a href="https://zhuanlan.zhihu.com/p/697378785" target="_blank" rel="noreferrer">Linux memory watermark 内存水位 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/8073214749" target="_blank" rel="noreferrer">Linux page reclaim 内存回收 - 知乎</a><ul><li>触发路径</li><li>页面 active,inactive 平衡、 文件页&amp;匿名页的平衡</li><li>swappiness</li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/10798919273" target="_blank" rel="noreferrer">Linux memory workingset 内存工作集 - 知乎</a><ul><li>有点抽象，很难看懂</li></ul></li></ul><hr><ul><li><a href="https://zhuanlan.zhihu.com/p/421298579" target="_blank" rel="noreferrer">linux 内存回收 之 File page 的 lru list 算法原理 - 知乎</a> 提到了 workingset</li><li><a href="https://zhuanlan.zhihu.com/p/697963587" target="_blank" rel="noreferrer">一文讲透 MGLRU - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/641355613" target="_blank" rel="noreferrer">关于 memcg 下 memory.reclaim 的一些想法 - 知乎</a></li><li><a href="https://tinylab.org/linux-swap-and-zram/" target="_blank" rel="noreferrer">Linux Swap 与 Zram 详解 - 泰晓科技</a></li></ul><hr><p>代码分析</p><ul><li><a href="https://www.cnblogs.com/tolimit/p/5435068.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存回收(整体流程) - tolimit - 博客园</a> 有错误。page cache 不是 MIGRATE_RECLAIMABLE，而是 MIGRATE_MOVABLE</li><li><a href="https://www.cnblogs.com/tolimit/p/5447448.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存回收(lru 链表) - tolimit - 博客园</a></li><li><a href="https://www.cnblogs.com/tolimit/p/5481419.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 直接内存回收中的等待队列 - tolimit - 博客园</a></li></ul><hr><p>不推荐，想看就看吧</p><ul><li><a href="https://blog.csdn.net/u010923083/article/details/116145038" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存回收 1---LRU 链表机制</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116278292" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存回收 2---快速内存回收和直接内存回收</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116278405" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存回收 3---kswapd 内核线程回收</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116278456" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存回收 4---shrink_node 函数详解</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116301277" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存回收 5---add_to_swap 函数详解</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/124054410" target="_blank" rel="noreferrer">kswapd 介绍</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/11827153.html" target="_blank" rel="noreferrer">【原创】（十）Linux 内存管理 - zoned page frame allocator - 5 - LoyenWang - 博客园</a></li></ul><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to “数据结构”">​</a></h2><p>struct page 中与页框回收相关的成员：</p><ol><li><code>unsigned long flags</code> 详见 <a href="./pageflags">pageflags</a><ul><li>PG_active、PG_referenced 用于表示当前页的活跃状态，并决定是否回收</li><li>PG_unevictable 表示当前页不可以回收</li><li>PG_mlocked 表示当前页被系统调用 mlock()锁定了，禁止换出和释放</li><li>PG_lru 表示当前页处于 lru 链表中</li><li>PG_swapcache 表示当前页正在被换出/换入</li><li>PG_private 及 PG_private_2 分别用来表示一个 zspage 的第一个页和最后一个页</li></ul></li><li><code>struct address_space mapping</code> 末位为 0 时，跟踪当前页映射的文件；为 1 时，指向 anon_vma（包含了 1 至多个 vma）</li><li><code>struct list_head lru</code> 用于将当前页加入到某个 lru 的 list</li><li>许多 page 的属性在 zram 中另有定义。</li></ol><h2 id="内存回收的触发条件" tabindex="-1">内存回收的触发条件 <a class="header-anchor" href="#内存回收的触发条件" aria-label="Permalink to “内存回收的触发条件”">​</a></h2><p>以 zone 单位。每个 zone 都有 <code>watermark[NR_WMARK]</code> 数组，保存的是各个阀值要求的页框数量。</p><ul><li><code>watermark[WMARK_HIGH]</code> 是 zone 对于空闲页框数量比较满意的一个值，当 zone 的空闲页框数量高于这个值时，表示 zone 的空闲页框较多。所以对 zone 进行内存回收时，目标也是希望将 zone 的空闲页框数量提高到此值以上，系统会使用此阀值用于 OOM killer 进行内存回收。kswapd 也是回收到此水线之上才 kswapd_try_to_sleep()</li><li><code>watermark[WMARK_LOW]</code> 是快速分配的默认阀值，在分配内存过程中，如果 zone 的空闲页框数量低于此阀值，系统会对 zone 执行快速内存回收。</li><li><code>watermark[WMARK_MIN]</code> 在快速分配失败后的慢速分配中会使用此阀值进行分配，如果慢速分配过程中使用此值还是无法进行分配，那就会执行直接内存回收和快速内存回收</li></ul><p>查看这 3 个阈值的数值，可以看到这些数值是非常小的，分别占该 zone 的 1.1% 1.4% 1.7%，这些都是在系统初始化期间进行设置的，具体设置函数是 <code>__setup_per_zone_wmarks()</code>，根据系统中整个内存的数量与每个 zone 管理的页框数量，计算出每个 zone 的 min 阀值，然后 low 和 high 分别是 min 的 1.25 和 1.5 倍。</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 如何设置这些值</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/zoneinfo</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    DMA32</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     421415</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        boost</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        min</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      4815</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 阈值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        low</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      6018</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        high</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     7221</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        promo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    8424</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        spanned</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1044480</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        present</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  520160</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# TODO 这个是啥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        managed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  425593</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 该 zone 的 page 总数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cma</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protection:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1983,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1983,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1983</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="内存回收概述" tabindex="-1">内存回收概述 <a class="header-anchor" href="#内存回收概述" aria-label="Permalink to “内存回收概述”">​</a></h2><p>针对三样东西进行回收：slab、lru 链表中的页、buffer_head。</p><p><code>shrink_lruvec()</code> 回收 lru 链表中的页：</p><ul><li>干净文件页，释放；</li><li>脏文件页，写回，再释放；</li><li>匿名页，交换，再释放。</li><li>shmem 使用的页</li></ul><p>除了一些特殊的页面分配方法（比如在映射时即进行页面分配，以提高性能）之外，大多用户进程的页（无论是文件页还是匿名页）都是通过 page fault 进行分配的。这些属于用户进程的页中，除了 PG_unevictable 修饰（不可回收）的页面都是可以进行回收的（比如 ramfs 所属页、mlock()的页等）。 当页面通过 page fault 被分配的时候，文件 page cache 被加入到非活动链表中(inactive list)， 匿名页(anonymous page)被加入到活动链表中(active list)。</p><p>内存回收并不是一个孤立的功能，它内部会涉及到其他很多东西，比如内存分配、lru 链表、反向映射、swapcache、pagecache 等。</p><p><code>shrink_slab()</code> 实际上不只是释放 slab，还会释放 virtio ballon，</p><h2 id="内存规整、迁移" tabindex="-1">内存规整、迁移 <a class="header-anchor" href="#内存规整、迁移" aria-label="Permalink to “内存规整、迁移”">​</a></h2><p>先看 <a href="./compaction">compaction</a> 和 <a href="./page_migration">migration</a></p><h2 id="三种回收" tabindex="-1">三种回收 <a class="header-anchor" href="#三种回收" aria-label="Permalink to “三种回收”">​</a></h2><ul><li>快速回收 <code>node_reclaim()</code></li><li>直接回收 direct reclaim</li><li>kswapd 回收</li></ul><h2 id="核心流程-shrink-node" tabindex="-1">核心流程 <code>shrink_node()</code> <a class="header-anchor" href="#核心流程-shrink-node" aria-label="Permalink to “核心流程 shrink_node()”">​</a></h2><h2 id="refcount" tabindex="-1"><code>_refcount</code> <a class="header-anchor" href="#refcount" aria-label="Permalink to “_refcount”">​</a></h2><p>实际上内存回收做的事情，就是想办法将一些 <code>_refcount</code> 不为 0 的页，尝试将它们的 <code>_refcount</code> 降到 0，这样系统就可以回收这些页了。</p><h2 id="lru" tabindex="-1">LRU <a class="header-anchor" href="#lru" aria-label="Permalink to “LRU”">​</a></h2><p>在内存回收时，系统会对页加以选择：如果选择经常被用到的页，即便回收了，马上又要被用到，这样不仅不能降低内存紧张的情形，反而会增加系统的负担。所以应当选择不太常用的页（或最近没有被用到的页）来回收。采用的主要算法就是 LRU 算法。</p><p>Linux 为了实现该算法，给每个 zone 都提供了 5 个 LRU 链表：</p><ul><li>Active Anon Page，活跃的匿名页，page-&gt;flags 带有 PG_active</li><li>Inactive Anon Page，不活跃的匿名页，page-&gt;flags 不带有 PG_active</li><li>Active File Cache，活跃的文件缓存，page-&gt;flags 带有 PG_active</li><li>Inactive File Cache，不活跃的文件缓存，page-&gt;flags 不带有 PG_active</li><li>unevictable，不可回收页，page-&gt;flags 带有 PG_unevictable</li></ul><p>而 inactive list 尾部的页，将在内存回收时优先被回收（写回或者交换）。</p><p>回收的页都是非活动匿名页 lru 链表或者非活动文件页 lru 链表上的页。这些页包括：进程堆、栈、匿名 mmap 共享内存映射、shmem 共享内存映射使用的页、映射磁盘文件的页。</p><h3 id="lru-缓存" tabindex="-1">LRU 缓存 <a class="header-anchor" href="#lru-缓存" aria-label="Permalink to “LRU 缓存”">​</a></h3><h2 id="workingset" tabindex="-1">workingset <a class="header-anchor" href="#workingset" aria-label="Permalink to “workingset”">​</a></h2><h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-label="Permalink to “TODO”">​</a></h2><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> user_proactive_reclaim <ul><li><a href="https://lwn.net/Articles/863753/" target="_blank" rel="noreferrer">Using DAMON for proactive reclaim [LWN.net]</a></li><li><a href="https://lwn.net/Articles/717656/" target="_blank" rel="noreferrer">Proactive compaction [LWN.net]</a></li><li><a href="https://lwn.net/Articles/817905/" target="_blank" rel="noreferrer">Proactive compaction for the kernel [LWN.net]</a></li><li><a href="https://lwn.net/Articles/787611/" target="_blank" rel="noreferrer">Proactively reclaiming idle memory [LWN.net]</a></li><li><a href="https://lwn.net/Articles/894849/" target="_blank" rel="noreferrer">Proactive reclaim for tiered memory and more [LWN.net]</a></li></ul></li></ul><h1 id="新版" tabindex="-1">新版 <a class="header-anchor" href="#新版" aria-label="Permalink to “新版”">​</a></h1><p>回收哪些东西？(what) 可以被回收的是：可以先释放，后面有机会再重新生成的。可以分为两大类：lru 链表上的页、以及其他通过注册 shrinker 来交代如何释放的资源。</p><ul><li><code>shrink_lruvec()</code> 回收 lru 链表上的页</li><li><code>shrink_slab()</code> 回收 slab cache，以及其他的诸如 virtio ballon 之类的</li></ul><p>回收的触发条件有哪些？(when)</p><ul><li><code>drop_slab()-&gt;shrink_slab()</code> 用户主动触发 <ul><li>echo 2 &gt; /proc/sys/vm/drop_caches</li></ul></li><li><code>shrink_node()</code><ul><li><code>user_proactive_reclaim()</code> 用户主动触发 <ul><li>/sys/devices/system/node/node0/reclaim</li><li>/sys/fs/cgroup/memory.reclaim</li></ul></li><li>快速回收 <code>get_page_from_freelist()-&gt;node_reclaim()</code></li><li>直接回收 <code>__alloc_pages_slowpath()-&gt;__alloc_pages_direct_reclaim()-&gt;__perform_reclaim()-&gt;try_to_free_pages()-&gt;do_try_to_free_pages()-&gt;shrink_zones()</code></li><li>kswapd 线程回收 <code>kswapd()-&gt;..-&gt;kswapd_shrink_node()</code></li><li>其他 <code>try_to_free_mem_cgroup_pages()-&gt;do_try_to_free_pages()-&gt;shrink_zones()</code><ul><li>/sys/fs/cgroup/memory.high</li><li>/sys/fs/cgroup/memory.max</li><li><code>try_charge_memcg()</code></li></ul></li></ul></li></ul><p>如何回收？(how)</p><p>先关注于页面分配时涉及到的内存回收路径， 快速回收、直接回收、kswapd 线程回收，它们最后都会调用 <code>shrink_node()</code>，只是 struct scan_control 不一样。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 直接回收 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_reclaim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 可回收的文件页数量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  我觉得在 ~RECLAIM_UNMAP|~RECLAIM_WRITE 时，计算出的数量肯定是偏低的，因为 unmapped file 里肯定不能包含所有的 dirty page，甚至数量比 dirty page 还少，这里却用 unmapped 数量减去 dirty 数量 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  node_pagecache_reclaimable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __node_reclaim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>从 /proc/zoneinfo 或 /sys/fs/cgroup/memory.stat 的内容来看， file &gt; inactive_file + active_file， nr_file_pages &gt; nr_inactive_file + nr_active_file， 即 NR_FILE_PAGES &gt; NR_INACTIVE_FILE + NR_ACTIVE_FILE</p><p><strong>计划</strong></p><ol><li>先写完最核心的 shrink_node，先介绍核心流程，</li><li>再写各种场景。快速（不阻塞、满足要求就退出、在快速慢速路径下的 watermark 分别是 low 和 min）、直接、kswapd（到 high 后就停止）</li><li>匿名、文件平衡，活跃不活跃平衡后面再写。workingset 后面再写。最重要的是建立起整体轮廓。</li><li>memcg 后面再写</li><li>MGLRU 后面再写</li></ol><p>先介绍核心框架里涉及的几个函数，而一些比较细节的函数，比如 prepare_scan_control()，先跳过放到后面再将，方便快速掌握核心流程。</p><h3 id="shrink-slab" tabindex="-1"><code>shrink_slab()</code> <a class="header-anchor" href="#shrink-slab" aria-label="Permalink to “shrink_slab()”">​</a></h3><h2 id="深入细节" tabindex="-1">深入细节 <a class="header-anchor" href="#深入细节" aria-label="Permalink to “深入细节”">​</a></h2><h3 id="平衡-active-inactive-和-文件页-匿名页" tabindex="-1">平衡 active/inactive 和 文件页/匿名页 <a class="header-anchor" href="#平衡-active-inactive-和-文件页-匿名页" aria-label="Permalink to “平衡 active/inactive 和 文件页/匿名页”">​</a></h3><p><strong>prepare_scan_control()</strong></p><ul><li>active 和 inactive 平衡 <ul><li>force_deactivate 是否强制将活跃页面转为不活跃页面。在直接回收场景，如果上一次跳过了回收 active 页面，然后回收失败，下一次强制将 active 转为 inactive</li><li>may_deactivate 允许哪些类型（anon 或 file）的 active 可以转为 inactive。判断依据是 inactive_is_low()，如果 inactive 少，就可以转。</li></ul></li><li>文件页&amp;匿名页的平衡 <ul><li>cache_trim_mode 当系统中有大量 inactive 状态文件页时，尝试优先回收文件页，然后再处理匿名页</li><li>file_is_tiny 当系统文件页极少时，满足条件扫描平衡强制设为 SCAN_ANON，表示只扫描匿名页，平衡匿名页与文件页比例。</li></ul></li></ul><p>常规情况下 page fault 新的 page 是放到 inactive list 所以一般情况下 inactive list 长度相对是偏大的， XXX 什么情况下会放进 active list？</p><h3 id="workingset-1" tabindex="-1">workingset <a class="header-anchor" href="#workingset-1" aria-label="Permalink to “workingset”">​</a></h3><h3 id="isolate-lru-folios" tabindex="-1"><code>isolate_lru_folios()</code> <a class="header-anchor" href="#isolate-lru-folios" aria-label="Permalink to “isolate_lru_folios()”">​</a></h3><h3 id="folio-referenced" tabindex="-1"><code>folio_referenced()</code> <a class="header-anchor" href="#folio-referenced" aria-label="Permalink to “folio_referenced()”">​</a></h3><h2 id="数据结构-1" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构-1" aria-label="Permalink to “数据结构”">​</a></h2><h3 id="folio-batch" tabindex="-1">folio_batch <a class="header-anchor" href="#folio-batch" aria-label="Permalink to “folio_batch”">​</a></h3><p>folio 指针数组。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio_batch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 数组大小，最大 PAGEVEC_SIZE = 31 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nr;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 用于 folio_batch_next() 遍历 folio_batch 中的 folio */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 表明是否执行过 lru_add_drain();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	   在 __folio_batch_release() 中会执行，并将该成员改为 true */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> percpu_pvec_drained;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> folio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folios[PAGEVEC_SIZE];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to “其他”">​</a></h2><ul><li>/dev/shmem 以及匿名的共享内存，虽然有对应的 inode、address_space，且 vma_is_anonymous() 返回 true，但是仍然是放在 anon lru 里的，因为这些没有 file backend，而是 swap backed 的。</li></ul><p><strong>如何打破平衡</strong></p><p>swappiness 可以提高匿名页的扫描比例，进一步促进系统回收更多的匿名页，</p><p><strong>我的思考</strong></p><p>如果按比例回收匿名页和文件页，会不会导致这种问题？ 某个文件页的活跃程度是比某个匿名页要高的，但前者被回收了，后者没回收。</p><p>回收数/扫描数，可以反映回收效率。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h2><ul><li>2013-05-13 <a href="https://lore.kernel.org/linux-mm/1368440482-27909-4-git-send-email-mgorman@suse.de/" target="_blank" rel="noreferrer">[PATCH 3/4] mm: Activate !PageLRU pages on mark_page_accessed if page is on local pagevec - Mel Gorman</a></li><li>2025-04-02 <a href="https://lore.kernel.org/all/20250402150005.2309458-9-willy@infradead.org/" target="_blank" rel="noreferrer">[PATCH v2 8/9] mm: Remove swap_writepage() and shmem_writepage() - Matthew Wilcox (Oracle)</a> 在 shrink_folio_list 时，只有 shmem 和 anon 会 pageout，而其他的，比如脏文件页不会 pageout</li></ul><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to “”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">folio_mark_accessed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-label="Permalink to “”">​</a></h2><ul><li>参考 <em>The Linux Memory Manager</em> 2.6 GFP flags</li></ul><p>GFP flags，可以分为几类：</p><ul><li>Physical address zone modifiers</li><li>Watermark modifiers 决定 watermark limit，以及如何使用 zone emergency reserves 内存 <ul><li><code>__GFP_HIGH</code> 高优先级，会 set <code>ALLOC_MIN_RESERVE</code>，允许使用 min watermak 的 50% 内存。</li><li><code>__GFP_MEMALLOC</code> 允许访问所有的内存。使用条件：当 caller 保证申请的内存很快会释放时，比如进程退出时等等（将来补充）</li><li><code>__GFP_NOMEMALLOC</code></li></ul></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* caller 不能睡眠，高优先级，可以唤醒 kswapd（不能 direct reclaim，会导致睡眠） */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GFP_ATOMIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">__GFP_HIGH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|__GFP_KSWAPD_RECLAIM)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>alloc flags</p><ul><li>ALLOC_NO_WATERMARKS</li></ul><h2 id="页面分配" tabindex="-1">页面分配 <a class="header-anchor" href="#页面分配" aria-label="Permalink to “页面分配”">​</a></h2><p>watermak</p><ul><li>low。作用： <ul><li>如果分配内存会导致降低到 low 阈值之下，就 node_reclaim 快速回收内存，</li><li>如果快速回收后，仍然解决不了会降到 low 阈值之下这个问题，就进入 slowpath： <ul><li>唤醒 kswapd 开始 indirect reclaim，直到升到 high 阈值才 kswapd 才停下</li><li>使用 min 阈值进行分配内存。</li></ul></li></ul></li><li>min。作用： <ul><li>使用 min 阈值进行分配内存时，如果分配内存会导致降低到 low 阈值之下，进行 direct reclaim</li></ul></li></ul><p>还有 emergency reserves 内存？</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 这里的 frozen 的含义是：还未对分配得到的 page 进行 set_page_refcounted() 将 refcount 置 1，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   详见 https://lore.kernel.org/linux-mm/20241125210149.2976098-14-willy@infradead.org/ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__alloc_frozen_pages_noprof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* get_page_from_freelist() 从 zone 分配内存时，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     会先计算出，分配 order 后，zone 内剩余内存 free_pages，如果 free_pages &lt;= 水线+保留内存，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     就 node_reclaim() 快速回收内存，如果仍然低于水线，就换到其他 zone。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alloc_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALLOC_WMARK_LOW;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get_page_from_freelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(, alloc_flags);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果失败了。则说明分配 order 后，会降到 low 阈值以下。就进入慢速路径*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __alloc_pages_slowpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 使用 min 阈值 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alloc_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gfp_to_alloc_flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gfp_mask, order);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alloc_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALLOC_WMARK_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALLOC_CPUSET;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 如果 GFP flag 里有 __GFP_KSWAPD_RECLAIM */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (alloc_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALLOC_KSWAPD)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      wake_all_kswapds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(order, gfp_mask, ac);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 使用 min 阈值分配内存 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get_page_from_freelist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gfp_mask, order, alloc_flags, ac);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="相关-patch" tabindex="-1">相关 patch <a class="header-anchor" href="#相关-patch" aria-label="Permalink to “相关 patch”">​</a></h2><ul><li>2016-07-21 <a href="https://lore.kernel.org/linux-mm/20160721073614.24395-1-vbabka@suse.cz/" target="_blank" rel="noreferrer">[PATCH 0/8] compaction-related cleanups v5 - Vlastimil Babka</a><ul><li>mm, page_alloc: set alloc_flags only once in slowpath <ul><li>在 slowpath 中只设置一次 slowpath，</li><li>新增 gfp_pfmemalloc_allowed() 函数，</li></ul></li><li>mm, page_alloc: don&#39;t retry initial attempt</li></ul></li><li>2023-01-13 <a href="https://lore.kernel.org/all/20230113111217.14134-1-mgorman@techsingularity.net/" target="_blank" rel="noreferrer">[PATCH 0/6 v3] Discard __GFP_ATOMIC - Mel Gorman</a><ul><li>mm: discard <code>__GFP_ATOMIC</code><ul><li>移除 <code>__GFP_ATOMIC</code>，因为它一直是和 <code>__GFP_HIGH</code> 一起使用，</li></ul></li></ul></li></ul>`,98)]))}const g=i(n,[["render",r]]);export{d as __pageData,g as default};
