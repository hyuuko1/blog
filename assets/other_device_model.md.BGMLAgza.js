import{_ as e,c as a,o as i,aj as l}from"./chunks/framework.CcbH9oJh.js";const o=JSON.parse('{"title":"Linux 设备模型","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Linux 设备模型 | Blog"}]]},"headers":[],"relativePath":"other/device_model.md","filePath":"other/device_model.md","lastUpdated":1761828946000}'),r={name:"other/device_model.md"};function n(t,s,h,d,p,k){return i(),a("div",null,s[0]||(s[0]=[l(`<h1 id="linux-设备模型" tabindex="-1">Linux 设备模型 <a class="header-anchor" href="#linux-设备模型" aria-label="Permalink to “Linux 设备模型”">​</a></h1><ul><li><a href="https://linux-kernel-labs.github.io/refs/heads/master/labs/device_model.html" target="_blank" rel="noreferrer">Linux Device Model — The Linux Kernel documentation</a></li><li><a href="https://linux-kernel-labs.github.io/refs/heads/master/labs/device_model.html" target="_blank" rel="noreferrer">Linux Device Model — Linux Kernel Labs</a></li><li><a href="https://www.wowotech.net/sort/device_model" target="_blank" rel="noreferrer">统一设备模型 - 蜗窝科技</a></li><li><a href="https://zhuanlan.zhihu.com/p/644913485" target="_blank" rel="noreferrer">【Linux 内核|驱动模型】bus/class/device/driver - 知乎</a></li></ul><h2 id="device" tabindex="-1">device <a class="header-anchor" href="#device" aria-label="Permalink to “device”">​</a></h2><h2 id="driver" tabindex="-1">driver <a class="header-anchor" href="#driver" aria-label="Permalink to “driver”">​</a></h2><h2 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to “class”">​</a></h2><h2 id="bus" tabindex="-1">bus <a class="header-anchor" href="#bus" aria-label="Permalink to “bus”">​</a></h2><h2 id="subsystem" tabindex="-1">subsystem <a class="header-anchor" href="#subsystem" aria-label="Permalink to “subsystem”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subsys_system_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  subsys_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subsys, groups, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">system_kset-&gt;kobj)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bus_register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(subsys)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> device</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kzalloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(struct device), GFP_KERNEL);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,8)]))}const b=e(r,[["render",n]]);export{o as __pageData,b as default};
