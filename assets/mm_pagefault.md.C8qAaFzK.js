import{_ as a,c as i,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const c=JSON.parse('{"title":"Page Fault","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Page Fault | Blog"}]]},"headers":[],"relativePath":"mm/pagefault.md","filePath":"mm/pagefault.md","lastUpdated":1761828946000}'),p={name:"mm/pagefault.md"};function e(h,s,t,k,r,d){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="page-fault" tabindex="-1">Page Fault <a class="header-anchor" href="#page-fault" aria-label="Permalink to “Page Fault”">​</a></h1><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/658583497" target="_blank" rel="noreferrer">Linux page fault - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/669335977" target="_blank" rel="noreferrer">Linux anonymous page fault - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/674910418" target="_blank" rel="noreferrer">Linux file-backed page fault - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/673410655" target="_blank" rel="noreferrer">一文聊透 Linux 缺页异常的处理 —— 图解 Page Faults - 知乎</a></li><li>《Linux 内核深度解析》3.14 页错误异常处理</li></ul><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to “概览”">​</a></h2><p>页错误异常有几种情况：</p><ol><li>缺页异常：虚拟页没有映射到物理页 <ol><li>访问用户栈的时候，超出了当前用户栈的范围，需要扩大用户栈。</li><li>当进程申请虚拟内存区域的时候，通常没有分配物理页，进程第一次访问的时候触发页错误异常。</li><li>内存不足的时候，内核把进程的匿名页换出到交换区。</li><li>一个文件页被映射到进程的虚拟地址空间，内存不足的时候，内核回收这个文件页，在进程的页表中删除这个文件页的映射。</li><li>程序错误，访问没有分配给进程的虚拟内存区域。 <br>前 4 种情况，如果页错误异常处理程序成功地把虚拟页映射到物理页，处理程序返回后，处理器重新执行触发异常的指令。 <br>第 5 种情况，页错误异常处理程序将会发送 SIGSEGV 信号以杀死进程。</li></ol></li><li>没有访问权限 <ol><li>可能是软件有意造成的，典型的例子是写时复制（Copy on Write ， CoW）。</li><li>程序错误，例如试图写只读的代码段所在的物理页。页错误异常处理程序将会发送 SIGSEGV 信号以杀死进程。</li></ol></li></ol><p>页表项不存在的情况：</p><table tabindex="0"><thead><tr><th></th><th>场景</th><th>读 (页表项不存在)</th><th>写 (页表项不存在)</th></tr></thead><tbody><tr><td>私有匿名</td><td></td><td><code>do_anonymous_page</code></td><td><code>do_anonymous_page</code></td></tr><tr><td>共享匿名</td><td></td><td><code>do_read_fault</code></td><td><code>do_shared_fault</code></td></tr><tr><td>共享文件</td><td></td><td><code>do_read_fault</code></td><td><code>do_shared_fault</code></td></tr><tr><td>私有文件</td><td>动态链接库</td><td><code>do_read_fault</code></td><td><code>do_cow_fault</code></td></tr></tbody></table><p>注意：私有文件映射页在写复制后，成了进程的私有匿名页，和文件脱离关系，不会 write back。</p><p>页表项存在的情况：</p><ul><li>如果页不在物理内存中，则说明在 swap 中，<code>do_swap_page</code>。</li><li>如果页在物理内存中，而且 pte 里没写权限（vmf-&gt;flags 里由），则说明是 fork 的私有页 CoW <code>do_wp_page</code>。</li></ul><h2 id="异常处理程序" tabindex="-1">异常处理程序 <a class="header-anchor" href="#异常处理程序" aria-label="Permalink to “异常处理程序”">​</a></h2><h3 id="arm-架构" tabindex="-1">ARM 架构 <a class="header-anchor" href="#arm-架构" aria-label="Permalink to “ARM 架构”">​</a></h3><p>如果没有命中 TLB 表项，内存管理单元将会查询内存中的页表，称为转换表遍历（translation table walk），分两种情况。</p><ol><li>如果虚拟地址的高 16 位全部是 1，说明是内核虚拟地址，应该查询内核的页表，从寄存器 TTBR1_EL1 取内核的页全局目录的物理地址。</li><li>如果虚拟地址的高 16 位全部是 0，说明是用户虚拟地址，应该查询进程的页表，从寄存器 TTBR0_EL1 取进程的页全局目录的物理地址。</li></ol><h3 id="x86-架构" tabindex="-1">x86 架构 <a class="header-anchor" href="#x86-架构" aria-label="Permalink to “x86 架构”">​</a></h3><p>用的居然是中断门，而非陷阱门！！ 因此发生 page fault 时，CPU 会自动清 RFLAGS.IF 禁本地中断。</p><p>从 git history 中找不出原因，DeepSeek 给出的解释是： Page Fault 的处理可能涉及修改页表、分配物理内存、调整进程地址空间等操作。这些操作需要保证原子性，避免被其他中断（如时钟中断、设备中断）打断，否则可能导致数据竞争或状态不一致。 若处理程序需要睡眠（如触发 I/O 操作或等待内存分配），内核仍可显式调用 <code>local_irq_enable()</code> 临时开启中断。 例如，处理用户态缺页时，可能因等待磁盘 I/O（如换页）而允许中断。</p><p>在<a href="https://lore.kernel.org/all/20240125173457.1281880-1-torvalds@linux-foundation.org/" target="_blank" rel="noreferrer">这个 patch</a> 后，在 <code>do_user_addr_fault()</code> 处理访问用户虚拟地址异常时，会 <code>local_irq_enable()</code> 开启中断。在此之前是这样的：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 如果是用户态访问用户虚拟地址异常，开中断 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regs)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	local_irq_enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_USER;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 如果是内核态访问用户虚拟地址异常。如果产生异常时是开中断的，则开 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (regs-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X86_EFLAGS_IF)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		local_irq_enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我的想法是：直接判断是否产生异常时是开中断的不就行了吗？用户态肯定开着中断的啊。 但是，我又发现了这个 commit: <a href="https://github.com/torvalds/linux/commit/891cffbd6bcba26409869c19c07ecd4bfc0c2460" target="_blank" rel="noreferrer">https://github.com/torvalds/linux/commit/891cffbd6bcba26409869c19c07ecd4bfc0c2460</a> 难道用户态也可以关中断？是的！在 Linux 5.5 之前可以用 <a href="https://man7.org/linux/man-pages/man2/iopl.2.html" target="_blank" rel="noreferrer">iopl(2)</a> 关闭中断！</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __initconst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idt_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> early_pf_idts[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* INTG: Interrupt gate */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	INTG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X86_TRAP_PF,		asm_exc_page_fault),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 不管是在用户态还是内核态触发 page fault 都是这个异常处理程序 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asm_exc_page_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  handle_page_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 访问内核虚拟地址时 page fault 这种情况非常少见 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fault_in_kernel_space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address)))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      do_kern_addr_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regs, error_code, address);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      do_user_addr_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regs, error_code, address);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        local_irq_enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果发生在用户态，就加上这个 flag */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regs)) flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_USER;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vma </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lock_vma_under_rcu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, address);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果是权限错误 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">access_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error_code, vma)))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          bad_area_access_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regs, error_code, address, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vma);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 处理 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_mm_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, address, flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_VMA_LOCK, regs);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果无需 retry，就 goto done 结束处理流程 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VM_FAULT_RETRY)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> done;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        retry:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* 重试 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          fault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle_mm_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, address, flags, regs);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      local_irq_disable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="用户空间页错误异常" tabindex="-1">用户空间页错误异常 <a class="header-anchor" href="#用户空间页错误异常" aria-label="Permalink to “用户空间页错误异常”">​</a></h2><p>从函数 <code>handle_mm_fault()</code> 开始的部分是所有处理器架构共用的部分，负责处理用户空间的页错误异常。用户空间页错误异常是指进程访问用户虚拟地址生成的页错误异常，分两种情况。</p><ol><li>进程在用户模式下访问用户虚拟地址，生成页错误异常。</li><li>进程在内核模式下访问用户虚拟地址，生成页错误异常。进程通过系统调用进入内核模式，系统调用传入用户空间的缓冲区，进程在内核模式下访问用户空间的缓冲区。</li></ol><p>简述 <code>handle_mm_fault()</code> 流程：</p><ol><li>如果 pgd p4d pud 页表不存在，则创建。</li><li>如果 pud 页表项空的，则尝试透明大页。成功则返回。</li><li>如果 pud 页表项不是空的，并且是透明大页，要么是因为 CoW，要么是因为要软件标记 access dirty 位。返回。 XXX 没有判断 swap 的情况吗？默认 pud huge page 不支持 swap？</li><li>如果 pmd 页表不存在，则创建。</li><li>如果 pmd 页表项空的，则尝试透明大页。成功则返回。</li><li>如果 pmd 页表项不是空的，...</li><li>最后，<code>handle_pte_fault()</code><ol><li>pte 页表项不存在的情况 <ol><li>私有匿名映射的情况</li><li>文件或共享匿名映射的情况</li></ol></li><li>pte 页表项存在，但是页不在物理内存中</li><li>pte 页表项存在，页也在物理内存中，可能的原因有： <ol><li>其他 cpu 在修改同一个页表项</li><li>没写权限，进行 CoW。//XXX 注意这和 <code>do_user_addr_fault()-&gt;bad_area_nosemaphore() 和 bad_area_access_error()</code> 不一样。后者要么是没找到 vma，要么 vma-&gt;vm_flags 里没 VM_WRITE，用户态程序没权限访问。</li><li>有写权限，产生异常的原因可能是因为没启用硬件标脏，需要软件来。</li></ol></li></ol></li></ol><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle_mm_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* hugetlb 大页 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_vm_hugetlb_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma))) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hugetlb_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma-&gt;vm_mm, vma, address, flags);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __handle_mm_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma, address, flags);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 普通页或 thp */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pgd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pgd_offset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, address);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    p4d_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, pgd, address);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* pgd 是 NULL 时才会 alloc */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vmf.pud </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pud_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, p4d, address);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 尝试 thp */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    create_huge_pud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vmf.pmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pmd_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, vmf.pud, address);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 尝试 thp */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    create_huge_pmd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle_pte_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pmd_none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf-&gt;pmd))) vmf-&gt;pte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 这里会让 vmf-&gt;ptl 指向页表锁 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vmf-&gt;pte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_offset_map_nolock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ptlp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_lockptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mm, pmdvalp);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf-&gt;pte)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        vmf-&gt;orig_pte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ptep_get_lockless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;pte);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* pte 页表项不存在 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf-&gt;pte) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_pte_missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果是私有匿名映射，则处理匿名页的缺页异常 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vma_is_anonymous</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;vma))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_anonymous_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果是文件映射，或者共享匿名映射，则处理文件的缺页异常 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vma-&gt;vm_ops-&gt;fault)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_WRITE))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            do_read_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma-&gt;vm_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VM_SHARED))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            do_cow_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            do_shared_fault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 页表项存在，但是页不在物理内存中，说明页被换出到 swap 了 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_present</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;orig_pte)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_swap_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* TODO 和 CONFIG_NUMA_BALANCING 有关 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_protnone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;orig_pte) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vma_is_accessible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;vma))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_numa_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 如果以上的都不是，那么，页表项存在，页也在物理内存中 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 获取页表锁 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      spin_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;ptl);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 重新读取页表项的值，如果与获取锁前的值不同，说明其他 cpu 可能正在修改同一个页表项，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         那么当前处理器只需要等着使用其他处理器设置的页表项，这里没必要继续处理了 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlikely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_same</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ptep_get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;pte), entry)))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        update_mmu_tlb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;vma, vmf-&gt;address, vmf-&gt;pte);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unlock;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 如果是由写操作造成的，或者是另外一种情况造成的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         TODO 另外一种情况是在 __get_user_pages-&gt;faultin_page 里设置了 FAULT_FLAG_UNSHARE */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vmf-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FAULT_FLAG_WRITE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FAULT_FLAG_UNSHARE))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 如果没有写权限，则进行 CoW */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> do_wp_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* 对于 ARM 架构，如果未启用硬件管理 dirty state，那么 writable-clean 的描述符会造成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           Permission fault，由 Linux 管理 dirty state */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">likely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_WRITE)) entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_mkdirty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 置上 Access flag */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_mkyoung</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* 如果 pte 和之前的相比有变化，则更新页表里的页表项，并进行 TLB invalid */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ptep_set_access_flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;vma, vmf-&gt;address, vmf-&gt;pte, entry, vmf-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_WRITE))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        update_mmu_cache_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf, vmf-&gt;vma, vmf-&gt;address, vmf-&gt;pte, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>pgd p4d pud pmd pte page 对应的 <code>struct page</code> 的内容其实是 64byte 的 <code>struct ptdesc</code>。 如果启用了 <code>CONFIG_SPLIT_PTE_PTLOCKS</code>，那么 <code>pte_lockptr()</code> 返回的就是细粒度的 ptdesc 里的 ptl，否则就是粗粒度的 mm_struct 里的 page_table_lock。</p><p>关于 <code>hugetlb_fault()</code>，详见 <a href="./hugetlb">hugetlb</a>。 关于为什么共享匿名映射为什么 <code>vma_is_anonymous()</code> 是 false，为什么和文件映射一样用 <code>do_fault()</code> 处理，见 <a href="./mmap">mmap</a>。</p><p>关于 ARM 架构的 dirty state 管理，详见 <a href="./../arch/arm/virtual_memory">The AArch64 Virtual Memory System Architecture</a>。</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 涉及到一些 thp 相关的，暂不讨论 <ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Support for transparent PUD pages for DAX files <a href="https://lwn.net/Articles/674185/" target="_blank" rel="noreferrer">https://lwn.net/Articles/674185/</a></li></ul></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> <code>FAULT_FLAG_UNSHARE</code> 是啥作用？ <a href="https://lore.kernel.org/all/20220428083441.37290-16-david@redhat.com/" target="_blank" rel="noreferrer">[PATCH v4 15/17] mm: support GUP-triggered unsharing of anonymous pages - David Hildenbrand</a></li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> devmap 是什么？</li></ul><h3 id="do-anonymous-page-私有-匿名页的缺页异常" tabindex="-1">do_anonymous_page (私有)匿名页的缺页异常 <a class="header-anchor" href="#do-anonymous-page-私有-匿名页的缺页异常" aria-label="Permalink to “do_anonymous_page (私有)匿名页的缺页异常”">​</a></h3><p><code>vma_is_anonymous()</code> 函数认为 <code>vma-&gt;vm_ops</code> 为 NULL 的是匿名页。</p><p>共享匿名映射的页面，其 vm_ops 不是 NULL，是 <code>shmem_anon_vm_ops</code>，因此不被视作匿名页，而是文件页。详见 <a href="./mmap">mmap</a> TODO 为啥这么设计？我的理解：linux 把这一块共享的资源抽象为一个文件？多个进程共享这个内存，就相当于是共享这个文件？</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">do_anonymous_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果是 vm_ops 为 NULL 的共享映射，说明有问题 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vma-&gt;vm_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VM_SHARED) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VM_FAULT_SIGBUS;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果 pte 页表不存在，则分配，并初始化 ptdesc */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  pte_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma-&gt;vm_mm, vmf-&gt;pmd);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 如果不是写操作导致的 fault，则使用 zero page */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FAULT_FLAG_WRITE))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 映射到专用的零页，并置上软件定义的 PTE_SPECIAL flag */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_mkspecial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pfn_pte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_zero_pfn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf-&gt;address)));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 找到 pte 页表项，并上锁 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vmf-&gt;pte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_offset_map_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* ___pte_offset_map 返回 NULL，说明获取 pte 失败，比如因为是大页或 devmap，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       会 gotounlock 返回 0，这是因为有可能同时另一个线程发生了 huge pmd fault 并处理了？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       XXX 会有这种情况吗？看看 git history */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf-&gt;pte) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unlock;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 在我们获取锁前，有可能另一个线程正在处理相同 page 的异常 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vmf_pte_changed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf)) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update_mmu_tlb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unlock;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 去更新页表 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setpte;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* TODO 匿名页的反向映射 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vmf_anon_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 分配我们自己的私有页，会优先从 highmem 分配，并初始化为 0，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     TODO 这里可能因为 thp 一下子分配多个页面？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     https://lore.kernel.org/all/20231207161211.2374093-1-ryan.roberts@arm.com/ */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alloc_anon_folio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* TODO 涉及一堆 thp 相关的 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    folio_prealloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(, need_zero</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 给 struct page 的 -&gt;flags 置上 PG_uptodate，表示物理页包含有效的数据 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __folio_mark_uptodate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 生成页表项 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mk_pte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folio-&gt;page, vma-&gt;vm_page_prot);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 除了不支持硬件设置 Access bit 的 MIPS 架构以外，其他架构的这个啥也没做。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     详见 https://lore.kernel.org/all/1590546320-21814-4-git-send-email-maobibo@loongson.cn/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     XXX 有些 arm cpu 也不支持硬件设置 Access bit 吧，这里是不是 pte_mkyoung 更好些，可以省去一次 page fault ? */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_sw_mkyoung</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 对于某些不支持硬件设置 dirty bit 的 ARM 机器，这里 pte_mkdirty 标记脏页，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     使得 entry 为 Writable-dirty，这样下次 write 时就不会 Permission fault */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vma-&gt;vm_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VM_WRITE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_mkwrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pte_mkdirty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry), vma);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 找到 pte 页表项，并上锁 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vmf-&gt;pte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pte_offset_map_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vmf-&gt;pte) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> release;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 建立起匿名页的反向映射 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  folio_add_new_anon_rmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, vma, addr, RMAP_EXCLUSIVE);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 放到 LRU 链表中 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  folio_add_lru_vma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folio, vma);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setpte:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 设置页表项 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set_ptes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vma-&gt;vm_mm, addr, vmf-&gt;pte, entry, nr_pages);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 更新 TLB */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  update_mmu_cache_range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vmf, vma, addr, vmf-&gt;pte, nr_pages);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> userfaultfd 相关的部分</li></ul><h3 id="do-fault-文件页的缺页异常" tabindex="-1">do_fault 文件页的缺页异常 <a class="header-anchor" href="#do-fault-文件页的缺页异常" aria-label="Permalink to “do_fault 文件页的缺页异常”">​</a></h3><p>哪些情况会触发文件页的缺页异常呢？</p><ol><li>启动用户态程序的时候，代码段和数据段创建私有的文件映射，映射到进程的虚拟地址空间，第一次访问的时候触发文件页的缺页异常。</li><li>进程使用 mmap 创建文件映射，把文件的一个区间映射到进程的虚拟地址空间，第一次访问的时候触发文件页的缺页异常。</li><li>进程 <code>mmap(,,MAP_SHARED|MAP_ANONYMOUS)</code> 创建共享匿名映射，第一次访问时触发缺页异常</li></ol><p>函数 <code>do_fault()</code> 处理文件页和共享匿名页的缺页异常</p><p>相关内容：<a href="./../storage/pagecache">pagecache</a></p><h4 id="do-read-fault-处理读文件页错误" tabindex="-1">do_read_fault 处理读文件页错误 <a class="header-anchor" href="#do-read-fault-处理读文件页错误" aria-label="Permalink to “do_read_fault 处理读文件页错误”">​</a></h4><p>文件页内容不在 page cache 里，</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="do-cow-fault-处理写私有文件页错误" tabindex="-1">do_cow_fault 处理写私有文件页错误 <a class="header-anchor" href="#do-cow-fault-处理写私有文件页错误" aria-label="Permalink to “do_cow_fault 处理写私有文件页错误”">​</a></h4><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="do-shared-fault-处理写共享文件-匿名页错误" tabindex="-1">do_shared_fault 处理写共享文件/匿名页错误 <a class="header-anchor" href="#do-shared-fault-处理写共享文件-匿名页错误" aria-label="Permalink to “do_shared_fault 处理写共享文件/匿名页错误”">​</a></h4><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="do-swap-page-页面换入" tabindex="-1">do_swap_page 页面换入 <a class="header-anchor" href="#do-swap-page-页面换入" aria-label="Permalink to “do_swap_page 页面换入”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="do-wp-page-处理写时复制" tabindex="-1">do_wp_page 处理写时复制 <a class="header-anchor" href="#do-wp-page-处理写时复制" aria-label="Permalink to “do_wp_page 处理写时复制”">​</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="内核模式页错误异常" tabindex="-1">内核模式页错误异常 <a class="header-anchor" href="#内核模式页错误异常" aria-label="Permalink to “内核模式页错误异常”">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_trampoline_6442466157+67</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __do_fault+5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_fault+279</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __handle_mm_fault+1986</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle_mm_fault+226</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_user_addr_fault+349</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exc_page_fault+129</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    asm_exc_page_fault+38</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _copy_to_iter+199</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    copy_page_to_iter+140</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filemap_read+478</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    vfs_read+665</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __x64_sys_pread64+152</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_syscall_64+130</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    entry_SYSCALL_64_after_hwframe+118</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: 1065</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_trampoline_6442466157+67</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __do_fault+5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_fault+279</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __handle_mm_fault+1986</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle_mm_fault+226</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_user_addr_fault+349</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exc_page_fault+129</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    asm_exc_page_fault+38</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _copy_to_iter+199</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    copy_page_to_iter+140</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    shmem_file_read_iter+264</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    vfs_read+665</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __x64_sys_pread64+152</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_syscall_64+130</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    entry_SYSCALL_64_after_hwframe+118</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: 1362</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_prog_6deef7357e7b4530_sd_fw_ingress+12846</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bpf_trampoline_6442466157+67</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __do_fault+5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_fault+279</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    __handle_mm_fault+1986</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handle_mm_fault+226</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    do_user_addr_fault+535</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exc_page_fault+129</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    asm_exc_page_fault+38</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: 18173</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p><a href="https://www.lxlinux.net/8943.html" target="_blank" rel="noreferrer">详解 Linux 内核之脏页跟踪-良许 Linux 教程网</a><a href="https://www.cnblogs.com/sky-heaven/p/16621085.html" target="_blank" rel="noreferrer">linux 那些事之 zero page【转】 - Sky&amp;Zhang - 博客园</a><a href="https://tinylab.org/riscv-page-fault-part2/" target="_blank" rel="noreferrer">RISC-V 缺页异常处理程序分析（2）：handle_pte_fault() 和 do_anonymous_page() - 泰晓科技</a><a href="https://blog.csdn.net/zf1575192187/article/details/105207086" target="_blank" rel="noreferrer">ARM Linux 如何模拟 X86 PTE 中的 Present Young 和 Dirty 标志位_arm 怎么模拟 dirty-CSDN 博客</a></p>`,56)]))}const E=a(p,[["render",e]]);export{c as __pageData,E as default};
