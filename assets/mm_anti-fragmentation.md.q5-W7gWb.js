import{_ as a,c as r,o as l,aj as t}from"./chunks/framework.CcbH9oJh.js";const d=JSON.parse('{"title":"内存反碎片技术","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"内存反碎片技术 | Blog"}]]},"headers":[],"relativePath":"mm/anti-fragmentation.md","filePath":"mm/anti-fragmentation.md","lastUpdated":1761828946000}'),i={name:"mm/anti-fragmentation.md"};function n(o,e,h,s,c,p){return l(),r("div",null,e[0]||(e[0]=[t('<h1 id="内存反碎片技术" tabindex="-1">内存反碎片技术 <a class="header-anchor" href="#内存反碎片技术" aria-label="Permalink to “内存反碎片技术”">​</a></h1><p>这是一个大专题，本文只做概述。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to “参考”">​</a></h2><ul><li><a href="https://cn.pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1/" target="_blank" rel="noreferrer">Linux 内核 VS 内存碎片 （上） | PingCAP 平凯星辰</a> 列出了一些 LWN 文章。</li><li><a href="https://cn.pingcap.com/blog/linux-kernel-vs-memory-fragmentation-2/" target="_blank" rel="noreferrer">Linux 内核 VS 内存碎片 （下） | PingCAP 平凯星辰</a></li><li><a href="https://zhuanlan.zhihu.com/p/81983973" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [一] - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/105745299" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [二] - CMA - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/117239320" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [三] - THP - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/351780620" target="_blank" rel="noreferrer">由 Linux 的内存碎片问题说开来 - 知乎</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/134343592" target="_blank" rel="noreferrer">超详细！Linux 内核内存规整详解-CSDN 博客</a></li><li><a href="https://blog.csdn.net/Linux_Everything/article/details/113667395" target="_blank" rel="noreferrer">LWN: 让 ZONE_MOVABLE 更加名副其实！-CSDN 博客</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/86498298" target="_blank" rel="noreferrer">对于 ZONE_MOVABLE 的理解_zone movable-CSDN 博客</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/105863277" target="_blank" rel="noreferrer">对于 MIGRATE_MOVABLE 的理解_movable migrate type-CSDN 博客</a></li><li><a href="https://www.cnblogs.com/aspirs/p/12781693.html" target="_blank" rel="noreferrer">内存管理中关于 Movable 的理解 - aspirs - 博客园</a></li><li><a href="https://www.wowotech.net/memory_management/memory-fragment.html" target="_blank" rel="noreferrer">linux kernel 内存碎片防治技术</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/107118409" target="_blank" rel="noreferrer">Linux 物理内存外碎片化浅析</a></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h2><ul><li><a href="https://lwn.net/Articles/158211/" target="_blank" rel="noreferrer">Fragmentation avoidance [LWN.net]</a></li></ul><h2 id="相关" tabindex="-1">相关 <a class="header-anchor" href="#相关" aria-label="Permalink to “相关”">​</a></h2><ul><li><a href="./cma">CMA (Contiguous Memory Allocator) 连续内存分配器</a></li><li><a href="./thp">THP (Transparent Huge Page) 透明大页</a></li></ul><h2 id="外部碎片" tabindex="-1">外部碎片 <a class="header-anchor" href="#外部碎片" aria-label="Permalink to “外部碎片”">​</a></h2><p>为了解决外部碎片问题，内核引入了以下反碎片技术。</p><ol><li>2.6.23 版本引入了虚拟可移动区域。</li><li>2.6.23 版本引入了成块回收（lumpy reclaim，有的书中翻译为集中回收）， 3.5 版本废除，被内存碎片整理技术取代。 成块回收不是一个完整的解决方案，它只是缓解了碎片问题。成块回收，就是尝试成块回收目标页相邻的页面，以形成一块满足需求的高阶连续页块。这种方法有其局限性，就是成块回收时没有考虑被连带回收的页面可能是“热页”，即被高强度使用的页，这对系统性能是损伤。</li><li>2.6.24 版本引入了根据可移动性分组的技术，把物理页分为不可移动页、可移动页和可回收页 3 种类型。</li><li>2.6.35 版本引入了内存碎片整理技术。</li></ol><p>虚拟可移动区域和根据可移动性分组是预防外部碎片的技术， 成块回收和内存碎片整理是在出现外部碎片以后消除外部碎片的技术。</p><h2 id="虚拟可移动区域-zone-movable" tabindex="-1">虚拟可移动区域 ZONE_MOVABLE <a class="header-anchor" href="#虚拟可移动区域-zone-movable" aria-label="Permalink to “虚拟可移动区域 ZONE_MOVABLE”">​</a></h2><p>从平台最高内存（在 32bit 系统中是 ZONE_HIGHMEM，在 64bit 系统中是 ZONE_NORMAL）中划分出了一部分内存，作为 ZONE_MOVABLE。</p><p>基本思想很简单：在可移动区域内，只允许分配可移动的页面。</p><p>内核启动参数</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>分配给内核使用的内存，都是不可移动的（因为存在线性映射，这个映射不能修改），所以不能从 ZONE_MOVABLE 分配。 XXX vmalloc 分配的内存，不是线性映射的，应该可以移动？</p><p>给用户分配的匿名页，使用的是 <code>GFP_HIGHUSER_MOVABLE</code> 包含了 <code>__GFP_HIGHMEM | __GFP_MOVABLE</code>，意味着可以从 ZONE_MOVABLE 分配。</p><h2 id="根据迁移类型进行分组" tabindex="-1">根据迁移类型进行分组 <a class="header-anchor" href="#根据迁移类型进行分组" aria-label="Permalink to “根据迁移类型进行分组”">​</a></h2><h2 id="内存碎片整理" tabindex="-1">内存碎片整理 <a class="header-anchor" href="#内存碎片整理" aria-label="Permalink to “内存碎片整理”">​</a></h2><p>详见 <a href="./compaction">memory compaction</a></p>',22)]))}const b=a(i,[["render",n]]);export{d as __pageData,b as default};
