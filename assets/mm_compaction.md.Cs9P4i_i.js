import{_ as a,c as i,o as n,aj as l}from"./chunks/framework.CcbH9oJh.js";const g=JSON.parse('{"title":"内存规整","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"内存规整 | Blog"}]]},"headers":[],"relativePath":"mm/compaction.md","filePath":"mm/compaction.md","lastUpdated":1761828946000}'),p={name:"mm/compaction.md"};function e(t,s,h,r,k,c){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="内存规整" tabindex="-1">内存规整 <a class="header-anchor" href="#内存规整" aria-label="Permalink to “内存规整”">​</a></h1><ul><li><a href="https://www.cnblogs.com/tolimit/p/5286663.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存碎片整理(实现流程) - tolimit - 博客园</a></li><li><a href="https://www.cnblogs.com/tolimit/p/5432674.html" target="_blank" rel="noreferrer">linux 内存源码分析 - 内存碎片整理(同步关系) - tolimit - 博客园</a></li><li><a href="https://blog.csdn.net/feelabclihu/article/details/134343592" target="_blank" rel="noreferrer">超详细！Linux 内核内存规整详解</a> /proc/vmstat</li><li><a href="https://blog.csdn.net/u010923083/article/details/116137687" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存规整 1---memory-compaction 详解</a></li><li><a href="https://blog.csdn.net/u010923083/article/details/116138670" target="_blank" rel="noreferrer">[内核内存] [arm64] 内存规整 2---页间内容的迁移（__unmap_and_move 函数)</a></li><li><a href="https://www.cnblogs.com/LoyenWang/p/11746357.html" target="_blank" rel="noreferrer">【原创】（九）Linux 内存管理 - zoned page frame allocator - 4 - LoyenWang - 博客园</a></li><li><a href="https://zhuanlan.zhihu.com/p/81983973" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [一] - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/105745299" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [二] - CMA - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/117239320" target="_blank" rel="noreferrer">Linux 中的 Memory Compaction [三] - THP - 知乎</a></li><li><a href="https://tinylab.org/lwn-717656/" target="_blank" rel="noreferrer">LWN 717656: 主动（proactive）内存规整（compaction） - 泰晓科技</a></li></ul><p>Memory Compaction 可以分为两部分：</p><ol><li>收集 page block 内的迁移页和空闲页</li><li>基于 Page Migration 技术完成页面迁移，形成一块连续内存。</li></ol><p>因此建议先看 <a href="./page_migration">page_migration</a></p><p>截至本文更新时，linux 内核版本为 6.16</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 整理 .c 文件中被外部调用的函数，梳理下功能点</li></ul><h2 id="patch-分析" tabindex="-1">patch 分析 <a class="header-anchor" href="#patch-分析" aria-label="Permalink to “patch 分析”">​</a></h2><ul><li><a href="https://lwn.net/Articles/368869/" target="_blank" rel="noreferrer">Memory compaction [LWN.net]</a><ul><li><a href="https://lore.kernel.org/all/1271797276-31358-1-git-send-email-mel@csn.ul.ie/" target="_blank" rel="noreferrer">[PATCH 0/14] Memory Compaction v8 - Mel Gorman</a></li></ul></li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f6c82728f4e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: migration: take a reference to the anon_vma before migrating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	匿名反向映射增加 migrate_refcount，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f60c214fd3a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: migration: share the anon_vma ref counts between KSM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page migration</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">67</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">b9509b2c68</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: migration: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to migrate unmapped anonymous pages</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fe2011ff51e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: migration: allow the migration of PageSwapCache pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e9e96b39f932 mm: allow CONFIG_MIGRATION to be set without CONFIG_NUMA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory hot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remove</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a8bef8ff6ea1 mm: migration: avoid race between </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift_arg_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rmap_walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() during migration by </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> migrating temporary stacks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d7a5752c0c19 mm: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unusable free space index via debugfs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f1a5ab121057 mm: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fragmentation index via debugfs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c175a0ce7584 mm: move definition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LRU isolation modes to a header</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">748446</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bb6b5a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: compaction: memory compaction core</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">76</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ab0f530e4a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: compaction: add </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proc trigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memory compaction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ed4a6d7f0676 mm: compaction: add </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys trigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> per</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node memory compaction</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">de7263fcf3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: compaction: direct compact when a high</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order allocation fails</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7719058079</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: compaction: add a tunable that decides when memory should be compacted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> when it should be reclaimed</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f92e2586b43</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm: compaction: defer compaction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> an exponential backoff when compaction fails</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="页面迁移" tabindex="-1">页面迁移 <a class="header-anchor" href="#页面迁移" aria-label="Permalink to “页面迁移”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* pageblock 的迁移类型。同一个 pageblock 内的所有 page 的迁移类型相同。 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migratetype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_UNMOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_MOVABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_RECLAIMABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_PCPTYPES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* the number of types on the pcp lists */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_HIGHATOMIC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MIGRATE_PCPTYPES,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_CMA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_ISOLATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* can&#39;t allocate from here */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_TYPES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migrate_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_ASYNC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_SYNC_LIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_SYNC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>三种迁移模式</p><ul><li><p><code>MIGRATE_ASYNC</code> 称之为“非阻塞迁移”更合适</p><p>最常用。在此模式中不会阻塞（但是时间片到了可以进行主动调度）， 使用场景：kswapd 内核线程中只使用异步模式，不会使用同步模式。</p><p>只处理 MIGRATE_MOVABLE 和 MIGRATE_CMA 类型中的页。 不处理 MIGRATE_RECLAIMABLE 类型的页框，因为这部分页框很大可能导致回写然后阻塞。//XXX 不对吧？？MIGRATE_RECLAIMABLE 大多都是 Slab 啊， MIGRATE_RECLAIMABLE 是可以回收，但是不可以迁移的，因此要回收后才能迁移？而回收可能会阻塞？</p><p>异步模式不会增加推迟计数器阀值。</p></li><li><p><code>MIGRATE_SYNC_LIGHT</code></p><p>轻同步模式。处理 MIGRATE_MOVABLE、MIGRATE_CMA 和 MIGRATE_RECLAIMABLE 类型的页。//XXX 真的会处理 MIGRATE_RECLAIMABLE 吗？？？MIGRATE_RECLAIMABLE 会被跳过吧，或者是回收完成后作为空闲页。</p><p>使用场景：在内存不足以分配连续页框后导致内存碎片整理时，首先会进行异步的内存碎片整理，如果异步的内存碎片整理后还是不能够获取连续的页框(这种情况发生在很多离散的页的类型是 MIGRATE_RECLAIMABLE)，并且 gfp_mask 明确表示不处理透明大页的情况或者该进程是个内核线程时，则进行轻同步的内存碎片整理。</p><p>此模式下允许进行大多数操作的阻塞，比如在磁盘设备繁忙时，锁繁忙时，比如隔离了太多页，需要阻塞等待一段时间。 XXX 为啥会等待磁盘？隔离了太多页是什么意思？ 但不会阻塞等待正在回写的页结束，对于正在回写的页直接跳过，也不会对脏页进行回写。 会处理匿名页和文件页，但是不会对脏文件页执行回写操作，而当处理的页正在回写时，也不会等待其回写结束。 XXX 我的理解是：干净的文件页会直接回收？脏的文件页会进行迁移？（但如果该脏页在写回，则会直接跳过，不等待回写结束）</p><p>轻同步模式会增加推迟计数器阀值。</p></li><li><p><code>MIGRATE_SYNC</code></p><p>所有操作都可以进行阻塞，并且会等待处理的页回写结束，并会对文件页、匿名页进行回写到磁盘，所以导致最耗费系统资源，对系统造成的压力最大。它会在三种情况下发生：</p><ol><li>从 cma 中分配内存时；</li><li>调用 alloc_contig_range() 尝试分配一段指定了开始页框号和结束页框号的连续页框时；</li><li>通过写入 1 到 sysfs 中的/vm/compact_memory 文件手动实现同步内存碎片整理。</li></ol></li></ul><p>在 kswapd 中，永远只进行异步的内存碎片整理，不会进行同步的内存碎片整理，并且在 kswapd 中会跳过标记了 PB_migrate_skip 的 pageblock。 相反，非 kswapd 中的内存碎片整理，当推迟次数超过了推迟阀值时，会将 pageblock 的 PB_migrate_skip 标记清除，也就是会扫描之前有 PB_migrate_skip 标记的 pageblock。 XXX 谁置上 PB_migrate_skip 的？</p><p>在同步内存碎片整理时，会忽略所有标记了 PB_migrate_skip 的 pageblock，强制对这段内存中所有 pageblock 进行扫描(当然除了 MIGRATE_UNMOVEABLE 的 pageblock)。</p><p>匿名页可能被当成脏页！匿名页加入到了 swapcache，会被标记为了脏页！不过在内存碎片整理时，即使匿名页被标记为脏页也不会被回写，它只有在内存回收时才会对脏匿名页进行回写到 swap 分区。在脏匿名页进行回写到 swap 分区后，基本上此匿名页占用的页框也快被释放到伙伴系统中作为空闲页框了。</p><h2 id="碎片整理过程" tabindex="-1">碎片整理过程 <a class="header-anchor" href="#碎片整理过程" aria-label="Permalink to “碎片整理过程”">​</a></h2><p>内存碎片整理是以 zone 为单位的，而 zone 中又以 pageblock 为单位。在内存碎片整理开始前，会在 zone 的头和尾各设置一个指针，头指针从头向尾扫描可移动的页，而尾指针从尾向头扫描空闲的页，当他们相遇时终止整理。</p><ol><li>头指针每次扫描一个符合要求的 pageblock 里的所有的可移动的正在使用的页框。 “符合要求”是指：pageblock 是 MIGRATE_MOVABLE、MIGRATE_CMA、MIGRATE_RECLAIMABLE 类型，不是这些类型时，则会跳过，比如 MIGRATE_UNMOVABLE pageblock。</li><li>当扫描完这个 pageblock 后有可移动的页框时，会变为尾指针以 pageblock 为单位扫描可移动页框数量的空闲页框，在 pageblock 中也是从开始页框向结束页框进行扫描。</li><li>最后会将头指针扫描到的可移动页框内容复制到尾指针扫描到的空闲页框中。</li><li>然后重复 1 2 3 步，直到头尾指针相遇。</li></ol><hr><p><strong>内存碎片整理发生时机</strong></p><ol><li>伙伴系统分配内存，进入慢速分配流程 <code>__alloc_pages_slowpath()</code>，若降低 watermak 值和进行 kswap 内存回收操作后，系统内存仍然吃紧，则伙伴系统会触发 memory-compaction。</li><li>当需要从指定地方获取连续页框，但是中间有页框正在使用时。（比如指定分配 ZONE_CMA 中的某段内存?）</li><li>因为内存短缺导致 kswapd 被唤醒时，在进行内存回收之后会进行内存碎片整理。</li><li>内存吃紧导致 kcompactd 线程唤醒触发内存碎片整理？</li><li>手动触发。 <code>echo 1 &gt; /sys/devices/system/node/nodexx/compact</code> 对某个 node 上的 zone 进行内存碎片整理，或 <code>echo 1 &gt; /proc/sys/vm/compact_memory</code> 对所有 zone 进行内存碎片整理。</li></ol><p><strong>系统判定是否执行内存碎片整理的标准</strong></p><ol><li>在分配页框过程中，zone 显示是有足够的空闲页框供于本次分配的，但是伙伴系统链表中又没有连续页框段用于本次分配。原因就是过多分散的空闲页框，它们没办法组成一块连续页框存放在伙伴系统的链表中。</li><li>在 kswapd 唤醒后会对 zone 的页框阀值进行检查，如果可用页框少于高阀值则会进行内存回收，每次进行内存回收之后会进行内存碎片整理。</li></ol><p>即使满足标准，也不一定会执行内存碎片整理，具体见后面的内存碎片整理推迟和 compact_zone()函数。</p><p><strong>内存碎片整理结束时机</strong></p><p>在内存碎片整理中，一次 zone 的内存碎片整理结束条件有三条：</p><ol><li>可移动页框扫描的位置是否已经超过了空闲页框扫描的位置，超过则结束整理，并且会重置 zone-&gt;compact_cached_free_pfn 和 zone-&gt;compact_cached_migrate_pfn，并且不是 kswap 时，会设置 zone-&gt;compact_blockskip_flush 为真</li><li>zone 的空闲页框数量满足了条件：zone 的 low 阀值 + 此次要分配的页面数(1 &lt;&lt; order) + zone 的保留页框数。</li><li>判断伙伴系统中是否有比 order 值大的空闲连续页框块，有则结束整理，如果 order 为-1，则忽略此条件</li></ol><p>不过有例外，通过写入到 /proc/sys/vm/compact_memory 进行强制内存碎片整理的情况，则判断条件只有第 1 条。对于 zone 来说，可移动页扫描和空闲页扫描交汇，也就是第一种情况时，才算是对 zone 进行了一次完整的内存碎片整理，这个完整的内存碎片整理并不代表一次内存碎片整理就能实现，也有可能是对 zone 进行多次内存碎片整理才达到的，因为每次内存碎片整理结束时机还有另外两种。当 zone 达到一次完整的内存碎片整理时，会重置两个扫描的起始为 zone 的第一个页和最后一个页，并且不是处于 kswap 中时，会设置 zone-&gt;compact_blockskip_flush 为真，这个 zone-&gt;compact_blockskip_flush 在 kswapd 准备睡眠时，会将 zone 的所有 pageblock 的 PB_migrate_skip 标志清除。</p><hr><p><strong>内存碎片整理推迟机制</strong></p><p>为什么要推迟？ 答：内存碎片整理是一个相当耗费资源的事情，它并不会经常会执行，即使因为内存短缺导致代码中经常调用到内存碎片整理函数，它也会根据调用次数选择性地忽略一些执行请求。</p><p>具体点，内存碎片整理虽然是针对每个 zone 的，但是执行的时候传入的是一个 zonelist，这样就会有一种情况，就是可能某个 zone 刚进行过内存碎片整理，而系统因为内存不足又进行了内存碎片整理，导致这个刚进行内存碎片整理的 zone 又要执行内存碎片整理，为了避免这种情况，内核会为每个 zone 做一个整理推迟计数，这个计数是每个 zone 都会有的。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 用于判断是否需要推迟，每次推迟会 ++，如果超过了 1 &lt;&lt; compact_defer_shift 则进行整理 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_considered;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 只有在同步和轻同步模式下进行内存碎片整理后，zone 的空闲页框数量没达到 (low阀值 + 1&lt;&lt;order + 保留内存) 时，才会 ++ */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_defer_shift;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 尝试碎片整理时的 order &gt;= compact_order_failed 时，并且没超过推迟计数阈值，就会推迟，否则，就进行整理。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 如果 order &gt;= compact_order_failed 时，整理成功，就将此值设置为 order+1，表明如果申请 order+1 可能会失败。*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			compact_order_failed;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 zone 执行内存碎片整理后，如果成功从此 zone 中分配到了 order 内存，就会重置 compact_considered 和 compact_defer_shift</p><hr><p><strong>内存碎片整理扫描起始位置与 pageblock 的跳过</strong></p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> zone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 空闲页框扫描起始位置，开始设置时是管理区的最后一个页框。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 在内存碎片整理扫描可以移动的页时，从本次内存碎片整理开始到此pageblock结束都没有隔离出可移动页时，会将此值设置为pageblock的最后一页。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 此值默认是zone的结束页框。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_cached_free_pfn;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* 0用于异步，1用于同步，用于保存管理区可移动页框扫描起始位置。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 在内存碎片整理扫描空闲页时，从本次内存碎片整理开始到此pageblock结束都没有隔离出空闲页时，会将此值设置为pageblock的最后一页。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 此值默认是zone的开始页框。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_cached_migrate_pfn[ASYNC_AND_SYNC];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_init_migrate_pfn;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		compact_init_free_pfn;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>对一个 pageblock 进行扫描后，如果无法从此 pageblock 隔离出一个要求的页框，这时候就会将此 pageblock 标记为跳过，主要通过设置 pageblock 在 zone 的 pageblock 位图中的 PB_migrate_skip 标志实现的。而标记之后会有两种情况：</p><ol><li>本次内存碎片整理在之前的 pageblock 已经隔离出了此种页框(可移动页/空闲页)，这种情况就是设置 pageblock 的 PB_migrate_skip 标记。</li><li>本次内存碎片整理在之前的 pageblock 中没有隔离出过此种页框(可移动页/空闲页)，说明之前的 pageblock 都被标记了跳过，这种情况不止设置 pageblock 的 PB_migrate_skip 标记，还会设置对于的内存碎片整理扫描起始位置。</li></ol><p>对于第二种情况，以扫描可移动页为例子，本次内存碎片整理可移动页扫描是从 zone 的第一个页框开始，扫描完一个 pageblock 后，没有隔离出可移动页框，则标记此 pageblock 的跳过标记 PB_migrate_skip，然后将 zone-&gt;compact_cached_migrate_pfn 设置为此 pageblock 的结束页框，这样，在下次对此 zone 进行内存碎片整理时，就会直接从此 pageblock 的下一个 pageblock 开始，把此 pageblock 跳过了。同理，对于空闲页扫描也是一样。</p><h2 id="kswapd" tabindex="-1">kswapd <a class="header-anchor" href="#kswapd" aria-label="Permalink to “kswapd”">​</a></h2><p>详见 <a href="./swap">swap</a></p><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to “数据结构”">​</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Determines how hard direct compaction should try to succeed.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Lower value means higher priority, analogically to reclaim priority.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 1. 优先级关系:  COMPACT_PRIO_SYNC_FULL &gt;  COMPACT_PRIO_SYNC_LIGHT &gt; COMPACT_PRIO_ASYNC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 2. compation对应的成本：COMPACT_PRIO_SYNC_FULL &gt;  COMPACT_PRIO_SYNC_LIGHT &gt; COMPACT_PRIO_ASYNC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 3. COMPACT_PRIO_SYNC_FULL完全同步成功率最高</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compact_priority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 整个内存规整以同步方式完成（允许阻塞，允许将脏页写回到存储设备上，直到等待完成）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_PRIO_SYNC_FULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIN_COMPACT_PRIORITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPACT_PRIO_SYNC_FULL,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 轻量级同步模式，允许绝大多数祖塞，但是不允许将脏页写回到存储设备上，因为等待时间比较长</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_PRIO_SYNC_LIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIN_COMPACT_COSTLY_PRIORITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPACT_PRIO_SYNC_LIGHT,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	DEF_COMPACT_PRIORITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPACT_PRIO_SYNC_LIGHT,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 整个内存规整操作以异步方式处理，不允许阻塞</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_PRIO_ASYNC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	INIT_COMPACT_PRIORITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPACT_PRIO_ASYNC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * MIGRATE_ASYNC means never block</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * MIGRATE_SYNC_LIGHT in the current implementation means to allow blocking</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *	on most operations but not -&gt;writepage as the potential stall time</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *	is too significant</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * MIGRATE_SYNC will block when migrating pages</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migrate_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 内存碎片整理最常用的模式（默认初始是异步模式），在此模式中不会进行阻塞(但是时间片到了可以进行主动调</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 度)，也就是此种模式不会对文件页进行处理，文件页用于映射文件数据使用，这种模式也是对整体系统压力较小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 的模式。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_ASYNC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 当异步模式整理不了更多内存时，有两种情况下会使用轻同步模式再次整理内存：1.明确表示分配的不是透明大</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 页的情况下；2.当前进程是内核线程的情况下。这个模式中允许大多数操作进行阻塞(比如隔离了太多页，需要阻</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 塞等待一段时间)。这种模式会处理匿名页和文件页，但是不会对脏文件页执行回写操作，而当处理的页正在回写</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 时，也不会等待其回写结束。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_SYNC_LIGHT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 所有操作都可以进行阻塞，并且会等待处理的页回写结束，并会对文件页、匿名页进行回写到磁盘，所以导致最</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 耗费系统资源，对系统造成的压力最大。它会在三种情况下发生：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 	1. 从cma中分配内存时；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 	2. 调用alloc_contig_range()尝试分配一段指定了开始页框号和结束页框号的连续页框时；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 	3. 通过写入1到sysfs中的/vm/compact_memory文件手动实现同步内存碎片整理。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * 同步模式会增加推迟计数器阀值，并且在同步模式下，会设置好compact_control，让同步模式时忽略</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * pageblock的PB_migrate_skip标记</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MIGRATE_SYNC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> migrate_reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_COMPACTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_MEMORY_FAILURE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_MEMORY_HOTPLUG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_SYSCALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* also applies to cpusets */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_MEMPOLICY_MBIND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_NUMA_MISPLACED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_CONTIG_RANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_LONGTERM_PIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_DEMOTION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_DAMON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	MR_TYPES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>内存规整(compact)中会调用 migrate_pages()，同时也会设置迁移模式(位于 compact_control-&gt;mode)。 若是 sysfs 主动触发的内存规整会用 MIGRATE_SYNC 模式； 若是 kcompactd 触发的规整会用 MIGRATE_SYNC_LIGHT 模式； 若是内存分配 slowpath 中触发的会根据 compact prior 去设置用 MIGRATE_ASYNC 或 MIGRATE_SYNC_LIGHT 模式。</p><p>在内存不足以分配连续页框后导致内存碎片整理时，首先会进行异步的内存碎片整理，如果异步的内存碎片整理后还是不能够获取连续的页框(这种情况发生在很多离散的页的类型是 MIGRATE_RECLAIMABLE)，并且 gfp_mask 明确表示不处理透明大页的情况或者该进程是个内核线程时，则进行轻同步的内存碎片整理。</p><p>在 kswapd 中，永远只进行异步的页面迁移，不会进行同步的页面迁移，并且在 kswapd 中会跳过标记了 PB_migrate_skip 的 pageblock。相反非 kswapd 中的页面迁移，当推迟次数超过了推迟阀值时，会将 pageblock 的 PB_migrate_skip 标记清除，也就是会扫描之前有 PB_migrate_skip 标记的 pageblock。</p><p>在同步页面迁移时，会忽略所有标记了 PB_migrate_skip 的 pageblock，强制对这段内存中所有 pageblock 进行扫描(当然除了 MIGRATE_UNMOVEABLE 的 pageblock)。</p><ul><li>异步是用得最多的，它整理的速度最快，因为它只处理 MIGRATE_MOVABLE 和 MIGRATE_CMA 两种类型，并且不处理脏页和阻塞的情况，遇到需要阻塞的情况就返回。</li><li>而轻同步的情况是在异步无法有效的整理足够内存时使用，它会处理 MIGRATE_RECLAIMABLE、MIGRATE_MOVABLE、MIGRATE_CMA 三种类型的页框，在一些阻塞情况也会等待阻塞完成(比如磁盘设备回写繁忙，待移动的页正在回写)，但是它不会对脏文件页进行回写操作。</li><li>同步整理的情况就是在轻同步的基础上会对脏文件页进行回写操作。</li></ul><p>这里需要说明一下，非文件映射页也是有可能被当成脏页的，当它加入 swapcache 后会被标记为脏页，不过在内存碎片整理时，即使匿名页被标记为脏页也不会被回写，它只有在内存回收时才会对脏匿名页进行回写到 swap 分区。在脏匿名页进行回写到 swap 分区后，基本上此匿名页占用的页框也快被释放到伙伴系统中作为空闲页框了。</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 描述内存规整完成后的状态信息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_SKIPPED: 跳过此zone，可能此zone不适合</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_DEFERRED: 此zone不能开始，是由于此zone最近失败过</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_CONTINUE: 继续尝试做page compaction</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_COMPLETE: 对整个zone扫描已经完成，但是没有规整出合适的页</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_PARTIAL_SKIPPED: 扫描了部分的zone，但是没有找到合适的页</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   COMPACT_SUCCESS: 规整成功，并且合并出空闲的页</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Return values for compact_zone() and try_to_compact_pages() */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* When adding new states, please adjust include/trace/events/compaction.h */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compact_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* For more detailed tracepoint output - internal to compaction */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_NOT_SUITABLE_ZONE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * compaction didn&#39;t start as it was not possible or direct reclaim</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * was more suitable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_SKIPPED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* compaction didn&#39;t start as it was deferred due to past failures */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_DEFERRED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* For more detailed tracepoint output - internal to compaction */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_NO_SUITABLE_PAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* compaction should continue to another pageblock */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_CONTINUE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * The full zone was compacted scanned but wasn&#39;t successful to compact</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * suitable pages.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_COMPLETE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * direct compaction has scanned part of the zone but wasn&#39;t successful</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * to compact suitable pages.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_PARTIAL_SKIPPED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* compaction terminated prematurely due to lock contentions */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_CONTENDED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * direct compaction terminated after concluding that the allocation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * should now succeed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	COMPACT_SUCCESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><hr><p>术语解释：</p><ul><li>direct compaction: 不同于 kcompactd 的</li><li>direct reclaim: 不同于 kswapd 的？</li></ul><h2 id="核心流程" tabindex="-1">核心流程 <a class="header-anchor" href="#核心流程" aria-label="Permalink to “核心流程”">​</a></h2><p>以<a href="./buddy">buddy</a> system 分配内存时进入慢速分配流程为例，</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__alloc_pages_slowpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gfp_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> gfp_mask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alloc_context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  __alloc_pages_direct_compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__alloc_pages_direct_compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  try_to_compact_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 内存规整核心函数，3 种触发方式最后都会调用该函数 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compact_result</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compact_zone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compact_control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> capture_control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">capc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  migrate_pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>从上到下</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>     内存分配</span></span>
<span class="line"><span>   compact reclaim</span></span>
<span class="line"><span>reclaim  migrate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>migrate reclaim compact 是三个比较大的模块，其中前两个更大，有更多模块依赖，而 compact 依赖前两个。 先从 migrate 和 reclaim 学起，</p><p>内存规整流程里，reclaim 会提升水线，但最后还是要用 get_page_from_freelist() 申请内存的。 在 get_page_from_freelist() 里没申请到会尝试快速回收，如果还是不行，就返回，后面再尝试直接回收啥的。</p><h2 id="到目前为止的变动" tabindex="-1">到目前为止的变动 <a class="header-anchor" href="#到目前为止的变动" aria-label="Permalink to “到目前为止的变动”">​</a></h2><h2 id="触发条件" tabindex="-1">触发条件 <a class="header-anchor" href="#触发条件" aria-label="Permalink to “触发条件”">​</a></h2><ol><li>伙伴系统分配内存，进入慢速分配流程 <code>__alloc_pages_slowpath()</code>，若降低 watermak 值和进行 kswap 内存回收操作后，系统内存仍然吃紧，则伙伴系统会触发 memory-compaction。</li><li>linux os 内存吃紧，kcompactd 线程唤醒触发 memory-compaction.</li><li>手动触发。<code>echo 1 &gt; /sys/devices/system/node/nodexx/compact</code> 或 <code>echo 1 &gt; /proc/sys/vm/compact_memory</code></li></ol><h2 id="一些-patch" tabindex="-1">一些 patch <a class="header-anchor" href="#一些-patch" aria-label="Permalink to “一些 patch”">​</a></h2><ul><li><a href="https://lore.kernel.org/all/20160810091226.6709-1-vbabka@suse.cz/" target="_blank" rel="noreferrer">[PATCH v6 00/11] make direct compaction more deterministic - Vlastimil Babka</a></li><li><a href="https://lore.kernel.org/all/1407142524-2025-1-git-send-email-vbabka@suse.cz/" target="_blank" rel="noreferrer">[PATCH v6 00/13] compaction: balancing overhead and success rates - Vlastimil Babka</a></li></ul>`,68)]))}const o=a(p,[["render",e]]);export{g as __pageData,o as default};
